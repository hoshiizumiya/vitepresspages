import{_ as s,c as i,o as a,ae as o}from"./chunks/framework.eveauE4a.js";const k=JSON.parse('{"title":"1. 🌳环境准备: 安装兼容的 Node 版本","description":"","frontmatter":{},"headers":[],"relativePath":"gitbook本地部署全指南/Step1-环境准备.md","filePath":"gitbook本地部署全指南/Step1-环境准备.md"}'),n={name:"gitbook本地部署全指南/Step1-环境准备.md"};function l(t,e,r,h,p,d){return a(),i("div",null,e[0]||(e[0]=[o(`<h1 id="_1-🌳环境准备-安装兼容的-node-版本" tabindex="-1">1. 🌳环境准备: 安装兼容的 Node 版本 <a class="header-anchor" href="#_1-🌳环境准备-安装兼容的-node-版本" aria-label="Permalink to &quot;1. 🌳环境准备: 安装兼容的 Node 版本&quot;">​</a></h1><h2 id="_1-1-首先检查电脑内是否安装过-node-js" tabindex="-1">1.1. 首先检查电脑内是否安装过 Node.js <a class="header-anchor" href="#_1-1-首先检查电脑内是否安装过-node-js" aria-label="Permalink to &quot;1.1. 首先检查电脑内是否安装过 Node.js&quot;">​</a></h2><p>a. 在安装程序或PATH环境变量的界面里检查。如果没有安装过，请进入<a href="#1.2.">第2步</a>。如果安装过，请务必卸载已安装的版本， 否则会出现版本不兼容的问题。<br> 卸载系统 msi 安装的 node.js 出现未找到旧版本缓存包的问题可以 用 <code>winget download node.js --version &lt;此处参数填写缺少的版本&gt;</code> 对应版本安装包然后卸载 b. 确保在安装前卸载已存在的 node.js 客户端，并清空安装文件夹目录中的 node 缓存（包括 node_cache&amp;node_global）。</p><p>c. 命令行</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">clean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">force</span></span></code></pre></div><p>以清空 npm 缓存。</p><p>d. 删除 Users\\User\\ 文件夹下的 .npmrc 文件，即有关 npm 的文件索引内容。 此项会导致安装的其他版本的 npm 包管理器无法正常查找路径及使用。 文件默认隐藏，需检查是否开启显示隐藏文件（Specify configs in the ini-formatted file）</p><h2 id="_1-2-安装-node-js-的版本管理器-fnm" tabindex="-1">1.2. 安装 Node.js 的版本管理器 fnm <a class="header-anchor" href="#_1-2-安装-node-js-的版本管理器-fnm" aria-label="Permalink to &quot;1.2. 安装 Node.js 的版本管理器 fnm&quot;">​</a></h2><p>TIPS： a. 不要用 nvm(Node version manager)进行管理 node 版本。因为 nvm 在安装 node 时不自动安装 npm 包管理器，还需要手动加 npm 到环境变量的位置。</p><p>b. 请使用更先进的 <strong>fnm</strong>(fast node manager)管理并使用不同版本的 node。<br> fnm 卸载 node 不成功的话任务管理器检查后台的 node.js 是否在运行中，结束任务。<br> fnm 是一个高性能的 node版本命令行管理工具，方便安装，快捷切换使用 node 的不同版本以管理不同的项目 c. 使用 winget 安装 fnm，由于 winget 默认安装到<code> C:\\Users\\用户名\\AppData\\Local\\Microsoft\\WindowsApps\\winget\\</code>等过长路径，不便于环境变量等管理，所以推荐自定义路径安装。 此过程尽量简略，以安装使用，更多 fnm 详细请参考<a href="https://github.com/Schniz/fnm" target="_blank" rel="noreferrer">fnm GitHub 项目</a> winget 详情请参考<a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/" target="_blank" rel="noreferrer">微软官方文档</a>。</p><p>在命令行(cmd/git gui/<strong>推荐 PowerShell v7.0</strong> 也可以使用自带的 PowerShell v1.0，但v7.0具有更多先进特性，更多请参考<a href="https://learn.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4" target="_blank" rel="noreferrer">微软官方文档</a> )使用 winget 安装 fnm</p><h3 id="安装-fnm" tabindex="-1">安装 fnm <a class="header-anchor" href="#安装-fnm" aria-label="Permalink to &quot;安装 fnm&quot;">​</a></h3><div class="language-PowerShell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">PowerShell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">winget install fnm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户自定义路径&quot;</span></span></code></pre></div><p>安装完成后将找到自定义路径中的 fnm.exe 把其所在的目录添加的环境变量中，以便在命令行中使用 fnm 命令。操作路径： 设置-系统-关于-Related links-高级系统设置-高级-环境变量-系统变量-Path-编辑-新建-填入 fnm 安装路径。在此推荐 PowerToys 工具，可以方便快捷地 manage 环境变量。</p><p>PowerShell中运行<code>fnm</code>检查是否安装成功，若成功则会显示 fnm 的运行错误提示</p><h2 id="_1-3-配置-node-js-的版本管理器-fnm" tabindex="-1">1.3. 配置 Node.js 的版本管理器 fnm <a class="header-anchor" href="#_1-3-配置-node-js-的版本管理器-fnm" aria-label="Permalink to &quot;1.3. 配置 Node.js 的版本管理器 fnm&quot;">​</a></h2><p>TIPS: fnm 配置使用不易，请仔细阅读后再逐步实操</p><ol><li><p>设置 fnm 的命令行启动参数脚本，方便每次启动不用手动设置 fnm 的执行环境变量信息</p><p>fnm 环境变量的设置是为了确保在当前的 shell 会话中正确加载 fnm 的配置。每次使用 fnm 之前都需要加载环境变量的原因在于 fnm 需要修改系统的环境变量，以便能够在当前会话中正确识别和使用不同版本的 Node.js。</p><p><strong>为什么需要加载 fnm 环境变量</strong></p><ol><li>环境变量更新： <ul><li>fnm 需要修改系统路径（PATH）以及其他环境变量，以便能够正确识别和使用安装的不同版本的 Node.js。</li></ul></li><li>多版本管理： <ul><li>fnm 允许你在不同的 Node.js 版本之间切换，因此需要确保当前会话中的环境变量正确反映了所使用的 Node.js 版本。</li></ul></li></ol><p><strong>如何永久加载 fnm 环境变量</strong></p><p>为了确保每次打开新的命令提示符或 PowerShell 会话时都能够自动加载 fnm 的环境变量，可以将加载环境变量的命令添加到你的 shell 配置文件中。<br> 注意你当前在使用的是什么版本的PowerShell<br> 在 PowerShell 中执行<code>$PROFILE</code>查看 PowerShell 的启动脚本配置文件路径，显示的当前用户的路径一般为<code>C:\\Users\\用户名\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</code>。</p></li></ol><blockquote><p>The locations (on Windows Vista) of the profiles for the PowerShell.exe(<strong>v1.0</strong>) host are as follows:</p><ul><li><p><code>%windir%\\system32\\Windows­PowerShell\\v1.0\\profile.ps1</code><br> This is for all users of the computer and for all shells.</p></li><li><p><code>%windir%\\system32\\Windows­PowerShell\\v1.0\\Microsoft.Power­Shell_profile.ps1</code><br> This is for all users of the computer, but it is only for the Microsoft.PowerShell shell.</p></li><li><p><code>%UserProfile%\\Documents\\Windows­PowerShell\\profile.ps1</code><br> This is for the current user only and all shells.</p></li><li><p><code>%UserProfile%\\Documents\\WindowsPowerShell\\Micro­soft.PowerShell_profile.ps1</code> This is for the current user only and only for the Microsoft.PowerShell shell.</p></li></ul><p><strong>These profiles aren&#39;t created by default. They exist only if you create them.</strong></p><ul><li>PowerShell v7.x 使用<code>%\\ ~~Windows~~PowerShell\\ %</code>的文件夹，注意分辨</li></ul></blockquote><ol start="2"><li>fnm 默认的 node 安装路径在C盘的用户目录下，建议更改安装和 node 的运行路径，以避免未来 node 的项目文件过大导致不易再管理 需要手动更改 node 运行变量位置。<br> 主要更改的是 <code>FNM_DIR</code> ，所有安装和数据都存储在 $FNM_DIR 环境变量指向的目录中。<br> 而 <code>FNM_MULTISHELL_PATH</code> 指向的是一个临时资源用于存储每个 shell 会话的状态信息（特定于 shell 会话的符号链接占用0B，指向 node 安装位置，此仅为 shell 的 node 临时运行位置），所以即使在C盘也不用管理<br> fnm 会为每个 Node.js 版本创建一个独立的安装目录，并且它还会为每个版本维护相关的缓存。具体来说，fnm 会将 Node.js 版本安装在 FNM_DIR 指定的目录下，并且每个版本都会有自己的子目录。<br> 假设你设置了 <code>FNM_DIR</code> 为 <code>D:\\Program Files\\fnm-node</code>，那么安装的 Node.js 版本将被放置在这个目录下，每个版本会有自己的子目录。例如：</li></ol><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D:\\Program Files\\fnm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── v14.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── v16.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── v18.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span></span></code></pre></div><h3 id="配置-fnm" tabindex="-1">配置 fnm <a class="header-anchor" href="#配置-fnm" aria-label="Permalink to &quot;配置 fnm&quot;">​</a></h3><p>一般请按下面配置<br> a. 前往<code>Documents\\(Windows)PowerShell\\</code><br> b. 新建<code>Microsoft.PowerShell_profile.ps1</code>文件<br> c. Open it and 新增加入<code>fnm env --use-on-cd --shell power-shell | Out-String | Invoke-Expression</code><br> 不建议使用 cmd 的原因也因未完全支持启动参数脚本，如过连 Windows 自带的 v1.0 版本也没有的话也请读者自行研究，或者每次使用前先运行上述命令</p><p>d. 前往环境变量设置中添加<code>FNM_DIR</code>项目，并填入自定义的运行文件夹位置 <img src="https://raw.githubusercontent.com/hoshiizumiya/images/main/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-20%20114730.jpg" alt="环境变量"></p><p>e. 命令行中运行<code>fnm env</code>检测是否成功更改路径，注意输出结果后面的 FNM_DIR 的值 <img src="https://raw.githubusercontent.com/hoshiizumiya/images/main/20240920115232.png" alt="FNM_DIR"></p><h2 id="_1-4-安装适配-gitbook-的-node-js-版本" tabindex="-1">1.4. 安装适配 gitbook 的 node.js 版本 <a class="header-anchor" href="#_1-4-安装适配-gitbook-的-node-js-版本" aria-label="Permalink to &quot;1.4. 安装适配 gitbook 的 node.js 版本&quot;">​</a></h2><p>Gitbook 由于官方年久不再维护，主要开发已转移至网页端的 <a href="https://gitbook.com" target="_blank" rel="noreferrer">gitbook.com</a>。<br> 本地端的 gitbook client 需要特定旧版本的 node.js 版本才能正常运行才能不会报错，很多版本都有js的报错需要手动注释掉来排除<br> 在此推荐 <code>node.js v12.16.3</code> 版本，据大多网友反馈兼容良好不报错，本人也使用此版本</p><h3 id="node-安装" tabindex="-1">node 安装 <a class="header-anchor" href="#node-安装" aria-label="Permalink to &quot;node 安装&quot;">​</a></h3><p>命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fnm install </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span></code></pre></div><p>安装过程出现问题自行改善网络环境<br> 命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fnm use </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span></span></code></pre></div><p>命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span></code></pre></div><p>检查是否正常输出 node 版本号<br> 命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm</span></span></code></pre></div><p>检查 npm 是否报错，正常是给出 npm 使用提示。<br> 如果执行 npm 命令之后出现报错，检查 npm 未删除的路径缓存文件是否存在，请跳转至<a href="#1.1.">第一步卸载 node -d</a></p><p><strong>安装完成！</strong></p><p>接下来————<strong>每次启动命令行使用 node 的流程应为首先执行</strong><code>fnm use 12</code></p><h2 id="_1-5-安装-gitbook-cli" tabindex="-1">1.5. 安装 gitbook-cli <a class="header-anchor" href="#_1-5-安装-gitbook-cli" aria-label="Permalink to &quot;1.5. 安装 gitbook-cli&quot;">​</a></h2><p>命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install gitbook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cli </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span></span></code></pre></div><p>理论上这样就不会有错误了 命令行：</p><div class="language-Powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Powershell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitbook</span></span></code></pre></div><p>正常显示的是 gitbook 的 usage</p><h2 id="环境准备结束" tabindex="-1">环境准备结束 <a class="header-anchor" href="#环境准备结束" aria-label="Permalink to &quot;环境准备结束&quot;">​</a></h2><p>如果今后使用其他版本的 node 也请效此步骤来使用 fnm 进行管理 fnm 的其他命令： <code>fnm uninstall &lt;node version&gt;</code>：卸载对应版本的 node<br><code>fnm list</code>：显示当前 fnm 管理的 node 版本列表<br><code>fnm current</code>：显示当前 fnm 使用的 node 版本</p><p>注意理论上使用 fnm 管理是会无法在全局使用 node 命令的</p>`,48)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
