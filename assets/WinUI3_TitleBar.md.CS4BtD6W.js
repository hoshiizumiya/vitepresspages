import{_ as s,c as a,o as t,ae as n}from"./chunks/framework.eveauE4a.js";const o=JSON.parse('{"title":"WinUI 3 自定义窗口 Title Bar 指南（C++/WinRT）","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/TitleBar.md","filePath":"WinUI3/TitleBar.md"}'),h={name:"WinUI3/TitleBar.md"};function l(p,i,k,e,d,r){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="winui-3-自定义窗口-title-bar-指南-c-winrt" tabindex="-1">WinUI 3 自定义窗口 Title Bar 指南（C++/WinRT） <a class="header-anchor" href="#winui-3-自定义窗口-title-bar-指南-c-winrt" aria-label="Permalink to &quot;WinUI 3 自定义窗口 Title Bar 指南（C++/WinRT）&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>WinUI 3 支持对窗口标题栏（Title Bar）进行多种自定义，包括高度、颜色、内容扩展等。以下讲解如何自定义。<br> 希望通过这个例子帮助你了解<code>cpp/WinRT</code>语法的设计不同和巧妙之处！</p><h2 id="_2-相关命名空间" tabindex="-1">2. 相关命名空间 <a class="header-anchor" href="#_2-相关命名空间" aria-label="Permalink to &quot;2. 相关命名空间&quot;">​</a></h2><p>你需要确保包含如下头文件和命名空间：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Microsoft.UI.Windowing.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><code>winrt/Microsoft.UI.Windowing.h</code> 提供了窗口和标题栏相关的 API。</li><li><code>Microsoft::UI::Xaml</code> 是 WinUI 的核心命名空间。</li><li>引入的位置应该是要与你的窗口定义的 cpp 文件一致，建议放到 <code>app.xaml.cpp</code>内的<code>OnLaunched()</code>函数内，在窗口创建前确保已完成自定义</li></ul><h2 id="_3-关键对象与方法" tabindex="-1">3. 关键对象与方法 <a class="header-anchor" href="#_3-关键对象与方法" aria-label="Permalink to &quot;3. 关键对象与方法&quot;">​</a></h2><h3 id="_3-1-获取窗口对象" tabindex="-1">3.1 获取窗口对象 <a class="header-anchor" href="#_3-1-获取窗口对象" aria-label="Permalink to &quot;3.1 获取窗口对象&quot;">​</a></h3><p>在 WinUI 3 中，通常通过 <code>MainWindow</code> 类创建主窗口实例作为入口窗口：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_3-2-确保已扩展内容到标题栏" tabindex="-1">3.2 确保已扩展内容到标题栏 <a class="header-anchor" href="#_3-2-确保已扩展内容到标题栏" aria-label="Permalink to &quot;3.2 确保已扩展内容到标题栏&quot;">​</a></h3><p>通过 <code>ExtendsContentIntoTitleBar(true)</code>，可以让自定义内容延伸到系统标题栏区域，以去掉默认的样式：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExtendsContentIntoTitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>函数接受一个 <code>bool</code> 类型的参数。</li><li>参数为 <code>true</code> 时，内容会延伸到标题栏区域，允许自定义。</li><li>参数为 <code>false</code> 时，使用系统默认标题栏。</li></ul><h3 id="_3-3-获取-appwindow-和-titlebar" tabindex="-1">3.3 获取 AppWindow 和 TitleBar <a class="header-anchor" href="#_3-3-获取-appwindow-和-titlebar" aria-label="Permalink to &quot;3.3 获取 AppWindow 和 TitleBar&quot;">​</a></h3><p><code>AppWindow</code> 提供了对窗口的更底层控制，该函数位于<code>winrt/Microsoft.UI.Windowing.h</code>头文件中。通过 <code>window.AppWindow()</code> 获取当前你要自定义的<code>window</code>对象：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><code>AppWindow::TitleBar()</code> 返回一个 <code>AppWindowTitleBar</code> 对象，用于进一步自定义标题栏：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> titleBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="_3-4-设置标题栏高度" tabindex="-1">3.4 设置标题栏高度 <a class="header-anchor" href="#_3-4-设置标题栏高度" aria-label="Permalink to &quot;3.4 设置标题栏高度&quot;">​</a></h3><p>可以通过 <code>PreferredHeightOption</code> 设置标题栏高度：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">titleBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBarHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Tall);</span></span></code></pre></div><ul><li><code>TitleBarHeightOption::Tall</code>：高标题栏</li><li><code>TitleBarHeightOption::Standard</code>：标准高度</li></ul><h2 id="_4-代码示例与语法讲解" tabindex="-1">4. 代码示例与语法讲解 <a class="header-anchor" href="#_4-代码示例与语法讲解" aria-label="Permalink to &quot;4. 代码示例与语法讲解&quot;">​</a></h2><p>完整流程如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnLaunched</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maybe_unused</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LaunchActivatedEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 创建主窗口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> make</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 扩展内容到标题栏</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExtendsContentIntoTitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 获取 AppWindow 和 TitleBar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (appWindow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> titleBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (titleBar)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 4. 设置标题栏高度为 Tall</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            titleBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBarHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Tall);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>进阶使用用法：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBarHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Tall);</span></span></code></pre></div><h3 id="语法说明" tabindex="-1">语法说明 <a class="header-anchor" href="#语法说明" aria-label="Permalink to &quot;语法说明&quot;">​</a></h3><ul><li><code>make&lt;MainWindow&gt;()</code>：C++/WinRT 的工厂函数，创建 <code>MainWindow</code> 实例。</li><li><code>window.ExtendsContentIntoTitleBar(true)</code>：扩展内容到标题栏。</li><li><code>auto appWindow = window.AppWindow();</code>：获取底层窗口对象。</li><li><code>auto titleBar = appWindow.TitleBar();</code>：获取标题栏对象。</li><li><code>titleBar.PreferredHeightOption(...)</code>：设置标题栏高度选项。</li></ul><h4 id="进阶用法" tabindex="-1">进阶用法： <a class="header-anchor" href="#进阶用法" aria-label="Permalink to &quot;进阶用法：&quot;">​</a></h4><p>这是 <code>C++/WinRT（wincpp/cppwinrt）</code>风格的“链式调用”语法，体现了现代 C++/WinRT 对 WinRT API 的包装方式。每个方法返回一个对象（引用），以继续调用属于它的下一个成员方法。</p><h4 id="语法关键" tabindex="-1">语法关键： <a class="header-anchor" href="#语法关键" aria-label="Permalink to &quot;语法关键：&quot;">​</a></h4><h5 id="使用-成员运算符" tabindex="-1">使用<code>.</code>成员运算符 <a class="header-anchor" href="#使用-成员运算符" aria-label="Permalink to &quot;使用\`.\`成员运算符&quot;">​</a></h5><p>对于不太了解<code>cpp</code>的初学者，你一定疑惑为什么使用成员运算符。</p><p>在 C++ 中使用<strong>成员运算符</strong>要求访问的是<strong>目标对象</strong>或的<strong>成员函数</strong>或<strong>成员变量</strong>，而我们访问的明明是一个方法不应该用指针-&gt;吗</p><p>在 C++/WinRT 中，API 被包装成 C++ 类，<strong>对象</strong>调用<strong>成员方法</strong>时自然用 <code>.</code> 。这也是<em>WinRT投影</em>实现——将<code>COM底层通过winRT</code>投影到CPP语言中使用。</p><p>易混淆点是：<code>cpp/winrt</code>的标准实现中返回的都是<strong>对象</strong>而不是创建的<strong>指向对象的指针</strong>，我们常常会<code>Class *ptr = new Classfunc()</code> 创建一个在堆上的对象，此时我们使用的是<code>ptr</code>就需要<code>ptr-&gt;</code>访问，相当于<code>(*ptr).*)</code>，而<code>cpp/winrt</code>返回的正是栈对象、非堆对象。</p><p>同时你也要注意，为了让<code>cpp/winrt</code>项目能够便携地使用你自定义的函数等，你应该让他们继承自<code>winrt::implements&lt;T,winrt::Windows::Foundation::IInspectable&gt;</code>T为你当前类的类型。 这也意味着编译器和 IDE（如 Visual Studio）会自动推断你可能需要用到 winrt::com_ptr&lt;&gt; 智能指针来管理这些接口对象。你需要使用<code>-&gt;</code>来访问。如下 <img src="https://cdn.jsdelivr.net/gh/hoshiizumiya/images/%E6%8C%87%E9%92%88%E4%B8%8E%E6%88%90%E5%91%98.png" alt="举例图片"> com_ptr 是 C++/WinRT 提供的智能指针模板，用于安全地管理 WinRT/COM 对象的生命周期（自动 AddRef/Release）。当你实现自定义 WinRT 组件、接口或工厂函数时，IDE 会智能提示 com_ptr 相关的命名空间和类型，帮助你正确管理对象引用，防止内存泄漏或悬挂指针。 你的函数会自动通过<code>cpp/winrt</code>的智能指针模板类<code>winrt::com_ptr&lt;&gt;</code>并要求实现。</p><h5 id="c-winrt-对象的分配与生命周期" tabindex="-1">C++/WinRT 对象的分配与生命周期 <a class="header-anchor" href="#c-winrt-对象的分配与生命周期" aria-label="Permalink to &quot;C++/WinRT 对象的分配与生命周期&quot;">​</a></h5><p>而C++/WinRT 返回的对象本质上是对底层 COM 对象的智能指针引用，拷贝和传递开销极小。属于轻量级句柄，由智能指针自动管理引用计数，开发者 不用手动调用 Release() 或 delete，对象会在不再使用时自动释放。对于<code>cpp/winrt</code>的对象，对象本身就是值类型（类似 std::string）， 但内部持有指向 COM 对象的指针，自动管理生命周期。所以你可以直接用 . 访问成员。</p><p>那你就肯定有疑问了：这些值类型的对象究竟被分配在了哪里。首先这些类型你在表面上看是属于值类型的对象，像是直接声明在了栈上进行使用。但 实际上，对象的内部持有一个指向底层 com 对象的智能指针（<code>winrt::impl::abi_t*</code>） 当拷贝复制这些对象时只是拷贝了智能指针并不会复制 底层 com 对象本身，开销极小。所以这些由函数返回的对象（变量）的确分配在栈上，但他们内部的指针 是指向的 com 对象 这些 com 对象实际 分配在堆上由COM运行时进行管理。</p><p>总的来说通过<code>AppWindow()</code>声明的<code>AppWindow()</code>只是在栈上面分配了一个很小的对象，通常只有一个指针的成员来指向实际的 com 对象，生命 周期由引用计数自动管理 。</p><h5 id="c-winrt-对象的分配细节示例" tabindex="-1">C++/WinRT 对象的分配细节示例 <a class="header-anchor" href="#c-winrt-对象的分配细节示例" aria-label="Permalink to &quot;C++/WinRT 对象的分配细节示例&quot;">​</a></h5><p>我们下面来分析一段代码并来解释</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //模板来自上层传递</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume_Microsoft_UI_Windowing_IAppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value{};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::is_same_v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::hresult _winrt_cast_result_code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_casted_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try_as_with_reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IAppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), _winrt_cast_result_code);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_cast_result_code);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_abi_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_winrt_casted_result;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //这就是由对象持有的指针</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_abi_type-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_abi_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_abi_type-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_TitleBar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::AppWindowTitleBar{ value, take_ownership_from_abi };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>void* value{}</code> 是一个未初始化的通用指针变量，初始值为 <code>nullptr</code>。 在 <code>WinRT/COM</code> 接口调用中，常用 <code>void**</code> 作为 out 参数，用于接收接口方法返回的对象指针。</p><p>在此有：<br> • 作为 get_TitleBar(&amp;value) 的输出参数，接收底层 COM 返回的 AppWindowTitleBar 接口指针。 • 后续用 <code>AppWindowTitleBar{ value, take_ownership_from_abi }</code> 包装成 C++/WinRT 对象，自动管理生命周期。 <code>TitleBar() const</code> 表示不会修改当前 C++/WinRT 包装对象的状态（即不会修改 this 指向的成员变量，包装对象本身不变）。不影响通过返回对象修改底层数据。 意味着你只能调用其 const成员函数不能修改成员变量 但是 由于它只约束当前对象本身 不约束返回的对象去操作底层数据 所以你从TitleBar() 得到的是另外一个 winRT 对象的包装还可以操作它 • 通过 COM ABI（Application Binary Interface）调用 get_TitleBar，获取底层的 AppWindowTitleBar 接口指针。</p><ol><li><code>if constexpr</code> 与类型判断 • <code>if constexpr (!std::is_same_v&lt;D, ...&gt;) </code>用于模板元编程，区分不同类型的处理方式。</li><li><code>static_cast&lt;D const*&gt;(this)</code> • 将当前对象强制转换为目标类型指针，便于后续的接口查询。</li><li><code>impl::try_as_with_reason</code> • 尝试将当前对象转换为指定的 WinRT 接口类型，获取底层 ABI 指针。</li><li><code>abi_t&lt;T&gt;</code> • 获取 WinRT 接口的底层 ABI 类型（即 <code>COM</code> 接口的 <code>vtable</code> 指针）。</li><li><code>check_hresult</code> • 检查 COM 方法调用的返回值，抛出异常或处理错误。</li><li><code>take_ownership_from_abi</code> • 指示 C++/WinRT 对象接管底层 COM 指针的生命周期，防止内存泄漏。</li></ol><h5 id="关于-hresult-handle-to-an-result" tabindex="-1">关于 hresult(Handle to an Result) <a class="header-anchor" href="#关于-hresult-handle-to-an-result" aria-label="Permalink to &quot;关于 hresult(Handle to an Result)&quot;">​</a></h5><p>你可能经常会在调试时遇到来自该类型的<code>check_hresult()</code>抛出异常，这是极为正常的。以下是解释： 它值本身是一个32位的整数值，用来表示函数调用的成功或失败状态，并且携带有关该操作返回结果的详细信息。具体来说，HRESULT 包含了三个部分： 一个严重性代码（指示成功或错误），一个设备代码（标识引发错误的系统组件），以及一个状态码（描述具体的错误或成功条件）。 如果你对 Windows API熟悉那你肯定知道他的 HRESULT 。在 C++/WinRT 中，winrt::hresult 其实就是对传统 HRESULT 的类型安全封装，和 Windows API 的 HRESULT 兼容。 check_hresult 会检查这个值，如果不是S_OK(0)表示成功，会抛出异常或终止执行，包含错误码，如 E_FAIL、E_INVALIDARG 等（来自 windows sdk winerror.h）</p><p>这里也贴出结构定义，有兴趣可以看看：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 29</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> F </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Code     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span></code></pre></div><p>S (Severity): 1 位，表示严重性（0 = 成功，1 = 失败） F (Facility): 11 位，表示错误来源（设施代码） Code: 20 位，具体的错误代码</p><p>📌 常见的 HRESULT 错误值：</p><table tabindex="0"><thead><tr><th>HRESULT 常量</th><th>值（十六进制）</th><th>含义</th></tr></thead><tbody><tr><td>S_OK</td><td>0x00000000</td><td>操作成功</td></tr><tr><td>S_FALSE</td><td>0x00000001</td><td>操作成功但返回“假”结果（如布尔函数）</td></tr><tr><td>E_FAIL</td><td>0x80000005</td><td>一般性失败（未知错误）</td></tr><tr><td>E_INVALIDARG</td><td>0x80070057</td><td>参数无效</td></tr><tr><td>E_OUTOFMEMORY</td><td>0x8007000E</td><td>内存不足</td></tr><tr><td>E_NOINTERFACE</td><td>0x80004002</td><td>不支持请求的接口</td></tr><tr><td>E_POINTER</td><td>0x80004003</td><td>指针无效（NULL）</td></tr><tr><td>E_NOTIMPL</td><td>0x80004001</td><td>方法未实现</td></tr><tr><td>CO_E_NOTINITIALIZED</td><td>0x800401F0 COM</td><td>库未初始化</td></tr></tbody></table><h2 id="_5-进阶自定义" tabindex="-1">5. 进阶自定义 <a class="header-anchor" href="#_5-进阶自定义" aria-label="Permalink to &quot;5. 进阶自定义&quot;">​</a></h2><p>你还可以通过 <code>AppWindowTitleBar</code> 设置更多属性，如背景色、前景色、按钮样式等。例如：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">titleBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ButtonBackgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">titleBar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ButtonForegroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">White</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h2 id="_6-注意事项" tabindex="-1">6. 注意事项 <a class="header-anchor" href="#_6-注意事项" aria-label="Permalink to &quot;6. 注意事项&quot;">​</a></h2><ul><li>自定义标题栏后，需自行处理窗口拖动、最小化、关闭等交互。</li><li>推荐在 XAML 中自定义 UI，并通过 <code>SetTitleBar</code> 方法指定自定义区域。</li></ul>`,62)]))}const g=s(h,[["render",l]]);export{o as __pageData,g as default};
