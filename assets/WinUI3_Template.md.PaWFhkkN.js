import{_ as s,c as a,o as t,ae as n}from"./chunks/framework.eveauE4a.js";const g=JSON.parse('{"title":"C++/WinRT 原理及实践 —— 模板元编程在 WinRT 中的实现","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/Template.md","filePath":"WinUI3/Template.md"}'),h={name:"WinUI3/Template.md"};function l(k,i,p,e,r,E){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="c-winrt-原理及实践-——-模板元编程在-winrt-中的实现" tabindex="-1">C++/WinRT 原理及实践 —— 模板元编程在 WinRT 中的实现 <a class="header-anchor" href="#c-winrt-原理及实践-——-模板元编程在-winrt-中的实现" aria-label="Permalink to &quot;C++/WinRT 原理及实践 —— 模板元编程在 WinRT 中的实现&quot;">​</a></h1><p>下面我们将以 <code>PreferredHeightOption()</code> 为例，带你讲解 cpp/winRT 是如何转换参数给 COM 的，以及相关使用模板元编程概念：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume_Microsoft_UI_Windowing_IAppWindowTitleBar2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TitleBarHeightOption</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constexpr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::is_same_v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindowTitleBar2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //注意取反</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::hresult _winrt_cast_result_code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_casted_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try_as_with_reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IAppWindowTitleBar2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), _winrt_cast_result_code);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_cast_result_code);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_abi_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindowTitleBar2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_winrt_casted_result;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_abi_type-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put_PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;int32_t&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _winrt_abi_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">abi_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IAppWindowTitleBar2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check_hresult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_winrt_abi_type-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put_PreferredHeightOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;int32_t&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>这里只讲部分，后面也会涉及到其他部分。</em></p><p>这么长的函数！？别急，我们慢慢来搞清楚。</p><ul><li>首先从第一行名字入手，我们定义了一个模板类型D。 <ul><li>注意我们在此句没有进行通常的换行，直接开始定义函数，这在模板中是可行的。这是由 WinRT生成的 cpp 代码的风格（模板声明紧跟函数定义），为了紧凑并缩短文件长度。</li><li><code>auto</code>:你要知道一般函数的<strong>返回类型</strong>必须<strong>显式</strong>地在<strong>定义</strong>时指定，除了这种方法，还有由 cpp11 引入的<strong>尾随/尾置返回类型</strong>：使用<code>auto</code>关键字占位，真正的返回类型在紧跟在参数列表后面的<code>-&gt;</code>后面符号指定，即可以由最后函数的返回值类型来指定当前函数返回值类型。亦能了解到与模板使用，能降低大量重复的代码编写。</li><li>后来在 C++14 引入了 <code>auto</code> 作为函数返回类型 的功能。前提是函数体中只有一个或多个类型相同的 return 语句，编译器就能推导出返回类型。此即为泛型，提高了编写效率，但降低了可读性。</li><li>此函数没有返回类型，故编译器推导返回值为 void 类型。那问题来了，一个简单的 void 为什么要使用 auto 来让编译器推导？这即是模板编程的强大之处。使用 <code>auto</code> 可以让模板更灵活，如果将来需要返回某个值（比如链式调用），只需要添加 <code>return</code> 语句，而不需要修改函数签名。当然这也是为了 cpp/winrt 框架的一致性。</li><li>从完整函数名我们得到了<code>PreferredHeightOption</code>是<code>consume_Microsoft_UI_Windowing_IAppWindowTitleBar2&lt;D&gt;</code>类的成员。可见其所在类本身也是模板类。</li><li>参数：类型为<code>winrt::Microsoft::UI::Windowing::TitleBarHeightOption</code>（从枚举类型传来的枚举数值），参数是一个 const&amp; 引用，避免拷贝。如果你不熟悉，强烈建议学习<a href="/vitepresspages/C++/memory1.html">C++ 移动语义</a>。</li><li></li></ul></li><li><code>if constexpr()</code> 是 C++17 开始引入的<strong>编译期条件判断</strong>语句，在现代 cpp <strong>模板元编程</strong>中常见，尤其 WinRT 强类型多接口情况。在()内容为 false 时，为假的不执行的分支代码将跳过编译，非运行时判断。 让模板代码可以根据类型参数，选择性地编译不同的实现，避免无效代码导致的编译错误。通过使用位于标准库 &lt;type_traits&gt; 的 <code>srd::is_same_v&lt;A,B&gt;</code> ，在编译时判断AB类型是否完全相同，返回一个 bool 类型。如果不是，走 if 分支；否则走 else 分支。较为简单，故不再举例讲解。</li><li>那现在来看具体来看都区分了什么： <ul><li>当 D 不是 IAppWindowTitleBar2 进入 if 分支。 <ul><li>首先声明了个 <code>hresult</code> 类型变量。使用<code>_winrt_cast_result_code</code>接收类型转换的结果码（HRESULT），判断转换是否成功。</li><li>看清括号，我们使用 auto 推导出位于 = 后面<code>impl::try_as_with_reason&lt;...&gt;()</code>函数的返回值，并使用<code>_winrt_casted_result</code>接收。</li><li><code>impl::try_as_with_reason&lt;...&gt;()</code>:<span style="color:red;font-weight:bold;">try_as_with_reason</span>是 WinRT 辅助函数，尝试将当前 this 指针（类型 D 的 const 指针）转换为 IAppWindowTitleBar2 <strong>接口指针</strong>，并将结果保存在 _winrt_casted_result，HRESULT 保存在 <code>_winrt_cast_result_code</code>。 <ul><li>辅助函数是指帮助完成某些重复、底层、复杂操作的工具性函数，让调用者不用关心细节。在 C++/WinRT 框架里，很多底层 COM 操作都被封装成了“辅助函数”，比如类型转换、错误处理、内存管理等。</li><li><code>try_as_with_reason</code>究竟干了什么？<code>try_as_with_reason&lt;Target, Source&gt;(pointer, hresult&amp;)</code> 是 C++/WinRT 框架里用于 <strong>接口类型转换（QueryInterface）</strong> 的工具函数，尝试把 pointer 转换为 Target 接口，返回转换后的<strong>智能指针</strong>，并把 HRESULT 存进 <code>hresult&amp;</code> 这个引用里，这样你就通过后面的<code>check_hresult()</code>知道转换成功还是失败，并能获得失败的原因。</li></ul></li><li>通过<code>check_hresult()</code>检查转换情况。为什么要在这里检查？因为其底层是基于 COM 和 ABI 的，其内部出错不便于错误定位。</li><li><code>abi_t&lt;...&gt;</code><ul><li>abi_t是C++/WinRT里表示底层ABI类型的类型别名，等同于abi_type。其定义有<code>template &lt;typename T&gt; using abi_t = typename T::abi_type;</code>。在 cppwinRT 中，其对于 WinRT 接口来说，::abi_type (abi_t) 就是 Interface*，即裸指针.</li><li>我们首先对其进行了解引用获得了其对象</li></ul></li></ul></li></ul></li></ul>`,6)]))}const o=s(h,[["render",l]]);export{g as __pageData,o as default};
