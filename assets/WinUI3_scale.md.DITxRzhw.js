import{_ as a,c as s,o as n,ae as l}from"./chunks/framework.eveauE4a.js";const I=JSON.parse('{"title":"WIndows 系统缩放 —— 以 WinUI 3 高分辨率和 DPI 缩放问题为例","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/scale.md","filePath":"WinUI3/scale.md"}'),t={name:"WinUI3/scale.md"};function e(o,i,r,h,p,d){return n(),s("div",null,i[0]||(i[0]=[l(`<h1 id="windows-系统缩放-——-以-winui-3-高分辨率和-dpi-缩放问题为例" tabindex="-1">WIndows 系统缩放 —— 以 WinUI 3 高分辨率和 DPI 缩放问题为例 <a class="header-anchor" href="#windows-系统缩放-——-以-winui-3-高分辨率和-dpi-缩放问题为例" aria-label="Permalink to &quot;WIndows 系统缩放 —— 以 WinUI 3 高分辨率和 DPI 缩放问题为例&quot;">​</a></h1><p>!!此文内容还需要补充！！</p><h2 id="winui-3-控件在高-dpi-下变小的原因及解决方案" tabindex="-1">WinUI 3 控件在高 DPI 下变小的原因及解决方案 <a class="header-anchor" href="#winui-3-控件在高-dpi-下变小的原因及解决方案" aria-label="Permalink to &quot;WinUI 3 控件在高 DPI 下变小的原因及解决方案&quot;">​</a></h2><p>在将 WPF 应用迁移到 WinUI 3 时，可能会遇到控件在高 DPI 下变小的问题。以下是一些原因和解决方案：</p><ol><li>控件默认大小和布局单位的差异 • WPF 使用“设备无关像素（DIP）”，1 DIP = 1/96 英寸。WPF 的渲染引擎会自动根据系统 DPI 缩放控件，保证在不同 DPI 下视觉大小一致。 • WinUI 3 也使用 DIP，但其控件的默认样式、Padding、Margin、字体等与 WPF 不完全一致。例如，WPF 的 Button 默认高度和字体比 WinUI 3 的 Button 要大。这是你从 WPF 迁移产生控件变小的主要原因之一。 • 直接复制 Height/Width：如果你在 WPF 里用 Height=&quot;30&quot;，在 WinUI 3 里同样设置，控件实际显示出来的大小可能会不同，尤其是字体和内容区域。</li></ol><hr><ol start="2"><li>DPI 处理方式的不同 • WPF 在高 DPI 下会自动缩放所有 UI 元素，且缩放算法和渲染方式较为成熟，兼容性好，但效果一般。 • WinUI 3 也支持高 DPI，但其 DPI 感知和缩放机制与 WPF 有细微差别，特别是在多显示器和高 DPI 场景下。WinUI 3 更依赖于操作系统的 DPI 感知声明（如 PerMonitorV2），并且控件的视觉密度（density）更高，导致同样的 DIP 数值下控件看起来更小。</li></ol><hr><ol start="3"><li>系统缩放的影响 • 如果你的系统缩放（如 200%）下，WPF 和 WinUI 3 都会尝试适配，但由于控件模板和渲染方式不同，WinUI 3 的控件可能会显得更“紧凑”或“瘦小”。 • WinUI 3 的控件在高 DPI 下不会像 WPF 那样自动“放大”到和 WPF 一样的视觉效果，尤其是字体和内容区域。</li></ol><hr><ol start="4"><li>内容被遮挡的原因 • 由于 WinUI 3 控件的默认 Padding、Margin、字体等都比 WPF 小，直接用 WPF 的高度/宽度设置，内容（如文字）可能会显示不全或被遮挡。 • 例如，WPF 的 Button 用 Height=&quot;30&quot; 足够显示一行文字，但 WinUI 3 可能需要更高的值。</li></ol><hr><ol start="5"><li>如何解决？ • 不要直接照搬 WPF 的 Height/Width，而是根据 WinUI 3 的实际显示效果调整。 • 明确设置 FontSize、Padding，并适当增大控件的高度。 • 在高 DPI 环境下，优先使用<strong>自适应布局</strong>（如 Grid、StackPanel），减少绝对数值的使用。 • 检查 manifest 文件，确保 DPI 感知模式为 visual studio 默认的 <code>PerMonitorV2</code>，并在必要时动态调整布局。</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- app.manifest 片段 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">application</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;urn:schemas-microsoft-com:asm.v3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">windowsSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dpiAware</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://schemas.microsoft.com/SMI/2005/WindowsSettings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;PerMonitorV2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dpiAware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">windowsSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h2 id="缩放系统讲解" tabindex="-1">缩放系统讲解： <a class="header-anchor" href="#缩放系统讲解" aria-label="Permalink to &quot;缩放系统讲解：&quot;">​</a></h2><h3 id="_1-permonitorv2-设置是什么" tabindex="-1">1. PerMonitorV2 设置是什么？ <a class="header-anchor" href="#_1-permonitorv2-设置是什么" aria-label="Permalink to &quot;1. PerMonitorV2 设置是什么？&quot;">​</a></h3><ul><li>PerMonitorV2 是 Windows 应用的 DPI 感知模式之一，声明在应用的 manifest 文件中。</li><li>含义：应用可以感知并适应每个显示器的 DPI（分辨率缩放），并在显示器 DPI 变化时自动调整 UI 缩放，获得最佳清晰度和布局。</li><li>适用场景：多显示器、不同缩放比例、动态切换显示器时，UI 能自适应缩放，避免模糊或错位。</li><li>WinUI 3 推荐并且默认使用 PerMonitorV2，这样控件和字体会根据当前显示器 DPI 自动缩放。</li></ul><h3 id="_2-exe-属性里的-高-dpi-设置-及-dpi-缩放替代" tabindex="-1">2. EXE 属性里的 “高 DPI 设置” 及 “DPI 缩放替代” <a class="header-anchor" href="#_2-exe-属性里的-高-dpi-设置-及-dpi-缩放替代" aria-label="Permalink to &quot;2. EXE 属性里的 “高 DPI 设置” 及 “DPI 缩放替代”&quot;">​</a></h3><p>在 Windows 资源管理器中，右键 EXE → 属性 → 兼容性 → “更改高 DPI 设置”，可以看到 DPI 缩放替代（DPI scaling override）</p><p>它允许你强制 Windows 以不同方式处理高 DPI 缩放，适用于未声明或不支持高 DPI 的老应用。</p><p><strong>选项说明</strong></p><p>• 应用（Application）</p><ul><li>让应用自己负责 DPI 缩放。<strong>只有</strong>应用声明了高 DPI 感知（如 PerMonitorV2 或 PerMonitor），Windows 不做额外缩放。适合 WinUI 3、WPF 等现代应用。我们大部分情况都是为了对于老式的 Win32 应用而设置的，其也可能导致 UI 模糊或错位。</li><li>强制应用程序忽略系统缩放，自行决定如何渲染界面。</li><li>如果程序内部已经适配高 DPI（如使用高分辨率资源或矢量图形），此模式能直接启用其优化。</li><li>如果程序未适配高 DPI，此模式可能导致界面 过小（因为未按系统缩放比例放大），但 <strong>不会模糊</strong>（因为未进行拉伸）。 • 系统（System） Windows 以系统 DPI 启动应用，应用本身不感知 DPI。Windows 会整体放大应用窗口（像素级别拉伸），可能导致 UI 模糊。 适合老旧 Win32 应用。 • 系统增强（System (Enhanced)） Windows 尝试智能缩放如双线性插值算法，改善传统 GDI 应用的缩放效果。对现代 UI 框架（如 WinUI 3）无效。</li></ul><h4 id="如果-不启用高-dpi-缩放覆盖-windows-的默认行为是" tabindex="-1">如果 不启用高 DPI 缩放覆盖，Windows 的默认行为是： <a class="header-anchor" href="#如果-不启用高-dpi-缩放覆盖-windows-的默认行为是" aria-label="Permalink to &quot;如果 不启用高 DPI 缩放覆盖，Windows 的默认行为是：&quot;">​</a></h4><ul><li>检测应用程序是否支持高 DPI： <ul><li>如果应用程序未声明 DPI 感知（Unaware），Windows 会强制拉伸其界面。而且这个强制拉伸算法是基于<strong>位图缩放</strong>（Bitmap Scaling）实现，所以直接导致界面模糊。</li><li>如果应用程序声明为“系统 DPI 感知”，但缩放比例不匹配显示器，Windows 仍会拉伸界面。</li></ul></li><li>位图拉伸的局限性： <ul><li>位图拉伸的本质是将低分辨率图像简单放大，导致像素模糊（类似放大照片的效果）。</li><li>非整数倍缩放（如 125%）时，模糊更明显。</li></ul></li><li>应用程序未适配多显示器缩放： <ul><li>在多显示器环境中，若显示器缩放比例不同，未适配的程序无法动态调整，导致模糊或错乱。</li></ul></li></ul><h4 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><p>我遇到过有些未声明高 DPI 感知的应用，在高 DPI 显示器上运行时，界面非常模糊。虽然程序具有高分辨率资源，但是系统仍然会选择缩放。</p><h3 id="_3-它们的关系" tabindex="-1">3. 它们的关系 <a class="header-anchor" href="#_3-它们的关系" aria-label="Permalink to &quot;3. 它们的关系&quot;">​</a></h3><p>• manifest 里的 PerMonitorV2 告诉 Windows：我的应用能感知并适应每个显示器的 DPI，请不要帮我缩放。 • EXE 属性里的 DPI 缩放替代 是用户/管理员手动干预的方式，强制 Windows 以某种方式缩放应用。 • 如果 manifest 已声明 PerMonitorV2，建议不要在这里启用“DPI 缩放替代”，否则可能导致缩放冲突或 UI 问题。 • 如果应用未声明高 DPI 感知，才建议用“系统”或“系统增强”来改善显示效果。</p><h2 id="程序启动过程详解" tabindex="-1">程序启动过程详解 <a class="header-anchor" href="#程序启动过程详解" aria-label="Permalink to &quot;程序启动过程详解&quot;">​</a></h2><h3 id="_1-程序启动时的-dpi-感知声明" tabindex="-1">1. 程序启动时的 DPI 感知声明 <a class="header-anchor" href="#_1-程序启动时的-dpi-感知声明" aria-label="Permalink to &quot;1. 程序启动时的 DPI 感知声明&quot;">​</a></h3><p>在 Windows 中，应用程序的 DPI 感知声明决定了其在高 DPI 显示器上的显示效果。以下是两种主要的 DPI 感知模式及其启动流程和执行过程：</p><p>(1) 应用程序未适配高 DPI（DPI Unaware）</p><p>启动流程： 程序启动时，Windows 检测到其未声明 DPI 感知。 系统默认以 96 DPI（100% 缩放）运行程序。 如果系统缩放比例为 125% 或 150%，Windows 会强制拉伸程序界面（位图缩放）。 执行过程： 位图拉伸：程序界面（如按钮、文字）被放大到系统缩放比例，导致像素模糊。 分辨率错位：程序的逻辑分辨率与物理分辨率不匹配，可能导致界面元素错位或失真。 动态调整失败：如果程序移动到不同缩放比例的显示器，Windows 会再次拉伸界面，进一步加剧模糊。</p><p>(2) 应用程序适配高 DPI（Per-Monitor DPI Aware）</p><p>启动流程：</p><p>程序启动时声明为“每显示器 DPI 感知”（Per-Monitor DPI Aware）。 Windows 会通知程序当前显示器的 DPI 值。 程序根据 DPI 值动态调整界面元素大小和布局。 执行过程： 无拉伸：程序直接以高 DPI 渲染，界面清晰。 动态适配：如果程序移动到不同缩放比例的显示器，程序会重新计算布局，避免模糊。</p><h3 id="_2-设置为-应用程序-模式时的程序启动过程" tabindex="-1">2. 设置为“应用程序”模式时的程序启动过程 <a class="header-anchor" href="#_2-设置为-应用程序-模式时的程序启动过程" aria-label="Permalink to &quot;2. 设置为“应用程序”模式时的程序启动过程&quot;">​</a></h3><p>(1) 强制启用“应用程序”模式 启动流程：</p><ul><li>程序启动时，Windows 将其标记为“应用程序级 DPI 感知”（Application DPI Aware）。</li><li>程序不再接收系统缩放比例，直接以原始 DPI 运行。 执行过程：</li><li>无拉伸：程序界面以原始 DPI 渲染，避免位图拉伸导致的模糊。</li><li>界面过小：如果程序未适配高 DPI，界面可能过小（但清晰）。</li><li>手动调整：用户需手动拖动窗口边框放大界面，或等待程序自身优化。</li></ul><p>(2) 程序适配高 DPI 的情况 效果：程序直接以高 DPI 渲染，界面清晰且适配。 示例：现代游戏（如 Steam 游戏）或 WPF 应用程序（如 Visual Studio）通常已适配高 DPI，设置为“应用程序”模式后效果最佳。</p><h2 id="我们拿-galgame-来举例" tabindex="-1">我们拿 Galgame 来举例 <a class="header-anchor" href="#我们拿-galgame-来举例" aria-label="Permalink to &quot;我们拿 Galgame 来举例&quot;">​</a></h2><ol><li>Galgame（或其他老程序）即使有高清资源，为什么界面还是模糊、被强制缩放？ 原因分析： • 很多 Galgame 或老程序没有在 manifest 文件中声明高 DPI 感知（如 PerMonitorV2），属于“DPI Unaware”。 • Windows 检测到这种程序后，会用位图拉伸（Bitmap Scaling）方式强制缩放界面，把 96DPI 的内容直接放大到系统缩放比例（如 150%、200%）。 • 这种拉伸是像素级别的，哪怕你资源是高清的，程序本身没用高 DPI 方式加载和布局，Windows 只会把渲染结果整体放大，导致模糊。 • 只有声明了高 DPI 感知，程序才会根据当前 DPI 重新布局和渲染，高清资源才能真正发挥作用。 为什么“应用程序”模式能解决？ • “应用程序”模式（Application DPI Aware）让 Windows 不再对程序做强制缩放，程序自己负责渲染。 • 如果程序本身有高分辨率资源，且能自适应 DPI，这时界面就会清晰。 • 但如果程序没适配高 DPI，界面会变小，但不会模糊。</li></ol>`,44)]))}const D=a(t,[["render",e]]);export{I as __pageData,D as default};
