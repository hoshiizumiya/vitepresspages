import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.eveauE4a.js";const g=JSON.parse('{"title":"字符串相关操作","description":"","frontmatter":{},"headers":[],"relativePath":"C++/字符串.md","filePath":"C++/字符串.md"}'),l={name:"C++/字符串.md"};function h(p,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="字符串相关操作" tabindex="-1">字符串相关操作 <a class="header-anchor" href="#字符串相关操作" aria-label="Permalink to &quot;字符串相关操作&quot;">​</a></h1><h2 id="有关字符串的强制类型转换-如何将整数赋值给字符数组" tabindex="-1">有关字符串的强制类型转换，如何将整数赋值给字符数组 <a class="header-anchor" href="#有关字符串的强制类型转换-如何将整数赋值给字符数组" aria-label="Permalink to &quot;有关字符串的强制类型转换，如何将整数赋值给字符数组&quot;">​</a></h2><p>在C++中，直接使用强制类型转换将一个整数赋值给字符数组是不可行的，因为这会导致不正确的结果。以下是详细解释一下为什么不能这样做以及如何正确处理这种情况。</p><h3 id="为什么不能直接使用强制类型转换" tabindex="-1">为什么不能直接使用强制类型转换 <a class="header-anchor" href="#为什么不能直接使用强制类型转换" aria-label="Permalink to &quot;为什么不能直接使用强制类型转换&quot;">​</a></h3><ul><li>类型不匹配： 整数和字符数组是不同类型的数据。整数是一个标量类型，而字符数组是一个复合类型。 直接将整数赋值给字符数组的第一个元素，只会将整数解释为ASCII码值，而不是将整数转换为字符串。</li><li>ASCII码值： 如前所述，整数123对应的ASCII字符是&#39;{&#39;。所以，char num[20] = { a }; 实际上是将123作为ASCII码值存储在num[0]中，而不是将整数123转换为字符串&quot;123&quot;。</li></ul><h3 id="正确的方法" tabindex="-1">正确的方法 <a class="header-anchor" href="#正确的方法" aria-label="Permalink to &quot;正确的方法&quot;">​</a></h3><p>要将整数转换为字符串并存储到字符数组中，可以使用以下方法之一：</p><ol><li>使用 std::to_string() 这是最简单和现代的方法，适用于C++11及以后的版本。</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cstring&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 包含 strcpy 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string strNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将整数转换为字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, strNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将字符串复制到字符数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>使用 <code>sprintf()</code> 这是一个更传统的C语言方法，适用于需要兼容C++早期版本的情况。</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;cstdio&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 包含 sprintf 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sprintf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将整数格式化为字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>使用 <code>std::stringstream</code> 这是一种更灵活的方法，适用于复杂的字符串操作。</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;sstream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringstream ss;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将整数写入字符串流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string strNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ss.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    strcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num, strNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将字符串复制到字符数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>虽然可以直接使用强制类型转换将整数赋值给字符数组，但这会导致不正确的结果。为了正确地将整数转换为字符串并存储到字符数组中，建议使用上述方法之一。这些方法不仅安全，而且易于理解和维护。</p><h2 id="size-sizeof-strlen-length-capacity的区别" tabindex="-1">size, sizeof, strlen, length, capacity的区别 <a class="header-anchor" href="#size-sizeof-strlen-length-capacity的区别" aria-label="Permalink to &quot;size, sizeof, strlen, length, capacity的区别&quot;">​</a></h2><ol><li>对于字符串长度的计算，有不同的方法，具体取决于你是使用C风格字符串（字符数组）还是std::string。<br> 对于C风格字符串（即以null字符 \\0 结尾的字符数组），可以使用 strlen 函数来获取字符串的长度。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    char str[] = &quot;Hello, World!&quot;;</span></span>
<span class="line"><span>    size_t length = strlen(str); // 获取字符串长度</span></span></code></pre></div><p>2.std::string<br> 对于 std::string 类型的字符串，可以使用 length 或 size 成员函数来获取字符串的长度。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;string&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 或者 str.size()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Length of the string: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 13</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><code>sizeof</code> 操作符<br> C++中，<code>sizeof</code> 操作符用于获取数据类型或变量在内存中所占的字节数，而不是字符串的长度。sizeof 操作符用于获取数据类型或变量在内存中所占的字节数，而不是字符串的长度。对于字符数组，sizeof 返回的是整个数组的字节数，包括终止符 \\0。</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取数组的总字节数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Size of the array: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; bytes&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endl;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 14 bytes</span></span></code></pre></div><p>C++中，std::string 类提供了两个成员函数来获取字符串的长度：length() 和 size()。这两个函数实际上是完全等价的，它们都返回字符串中字符的数量。</p><h3 id="length-和-size" tabindex="-1">length() 和 size() <a class="header-anchor" href="#length-和-size" aria-label="Permalink to &quot;length() 和 size()&quot;">​</a></h3><p>length()：</p><ul><li>返回字符串中字符的数量。</li><li>语法：size_t length() const;</li></ul><p>size()：</p><ul><li>返回字符串中字符的数量。</li><li>语法：size_t size() const;</li></ul><h4 id="主要区别" tabindex="-1">主要区别 <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;主要区别&quot;">​</a></h4><p>功能相同：</p><ul><li>length() 和 size() 都返回字符串中字符的数量，它们在功能上是完全相同的。</li><li>它们返回的类型都是 size_t，这是一个无符号整数类型，通常用于表示大小和索引。 命名习惯：</li><li>length() 更符合某些编程语言（如C）中的命名习惯，因为C语言中常用的字符串长度函数是 strlen。</li><li>size() 更符合STL（Standard Template Library）中的命名习惯，因为在STL容器（如 vector、list 等）中，通常使用 size() 来获取容器的大小。</li></ul><h3 id="size-分析-string-对象都存储了什么" tabindex="-1">size 分析 string 对象都存储了什么： <a class="header-anchor" href="#size-分析-string-对象都存储了什么" aria-label="Permalink to &quot;size 分析 string 对象都存储了什么：&quot;">​</a></h3><p>具体的内存布局可能会因编译器和平台的不同而有所差异</p><h4 id="std-string-的内存布局通常包括以下内容" tabindex="-1">std::string 的内存布局通常包括以下内容： <a class="header-anchor" href="#std-string-的内存布局通常包括以下内容" aria-label="Permalink to &quot;std::string 的内存布局通常包括以下内容：&quot;">​</a></h4><p>数据指针 (char* 或 char* 类型的指针)：</p><ul><li>指向实际存储字符串数据的内存地址。</li><li>大小：通常为8字节（64位系统）或4字节（32位系统）。 长度信息 (size_t 类型)：</li><li>存储字符串的当前长度。</li><li>大小：通常为8字节（64位系统）或4字节（32位系统）。 容量信息 (size_t 类型)：</li><li>存储字符串的当前容量（即已分配的内存大小）。</li><li>大小：通常为8字节（64位系统）或4字节（32位系统）。 其他内部数据：</li><li>可能包括一些额外的内部管理数据，例如是否使用了小字符串优化（Small String Optimization, SSO）。</li><li>SSO允许短字符串直接存储在 std::string 对象内部，而不是动态分配内存。</li><li>大小：这取决于具体的实现，但通常会占用额外的空间。</li></ul><h4 id="小字符串优化-sso" tabindex="-1">小字符串优化（SSO） <a class="header-anchor" href="#小字符串优化-sso" aria-label="Permalink to &quot;小字符串优化（SSO）&quot;">​</a></h4><p>许多现代的 std::string 实现使用了小字符串优化（SSO），这使得短字符串可以直接存储在 std::string 对象内部，从而避免了动态内存分配的开销。具体来说，std::string 对象内部会预留一段固定的内存空间来存储短字符串。</p><p>假设 std::string 对象的大小为40字节，我们可以大致推测其内存布局如下：</p><p>数据指针或直接存储的字符串：</p><ul><li>如果字符串长度小于等于某个阈值（例如15个字符），字符串数据可以直接存储在这部分内存中。</li><li>否则，这部分内存存储一个指向动态分配内存的指针。</li><li>大小：通常为24字节（包括指针或直接存储的字符串）。</li></ul><p>长度信息 (size_t 类型)：</p><ul><li>存储字符串的当前长度。</li><li>大小：8字节。</li></ul><p>容量信息 (size_t 类型)：</p><ul><li>存储字符串的当前容量。</li><li>大小：8字节。</li></ul><table tabindex="0"><thead><tr><th>数据指针/直接存储</th><th>长度</th><th>容量</th></tr></thead><tbody><tr><td>24字节</td><td>8字节</td><td>8字节</td></tr></tbody></table>`,46)]))}const y=i(l,[["render",h]]);export{g as __pageData,y as default};
