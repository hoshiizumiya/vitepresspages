import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.eveauE4a.js";const g=JSON.parse('{"title":"C++/WinRT 原理及实践 —— WinRT 接口机制与继承模型详解 plus","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/interface.md","filePath":"WinUI3/interface.md"}'),t={name:"WinUI3/interface.md"};function h(e,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-winrt-原理及实践-——-winrt-接口机制与继承模型详解-plus" tabindex="-1">C++/WinRT 原理及实践 —— WinRT 接口机制与继承模型详解 plus <a class="header-anchor" href="#c-winrt-原理及实践-——-winrt-接口机制与继承模型详解-plus" aria-label="Permalink to &quot;C++/WinRT 原理及实践 —— WinRT 接口机制与继承模型详解 plus&quot;">​</a></h1><hr><h2 id="_1-winrt-接口基础与定义" tabindex="-1">1. WinRT 接口基础与定义 <a class="header-anchor" href="#_1-winrt-接口基础与定义" aria-label="Permalink to &quot;1. WinRT 接口基础与定义&quot;">​</a></h2><h3 id="_1-1-什么是接口" tabindex="-1">1.1 什么是接口？ <a class="header-anchor" href="#_1-1-什么是接口" aria-label="Permalink to &quot;1.1 什么是接口？&quot;">​</a></h3><p>接口（Interface）是面向对象编程中用于定义一组方法签名的抽象类型。WinRT 接口本质上是 COM 接口的扩展，所有 WinRT 接口都隐式继承自 IInspectable。</p><h3 id="_1-2-winrt-接口的语法与元数据" tabindex="-1">1.2 WinRT 接口的语法与元数据 <a class="header-anchor" href="#_1-2-winrt-接口的语法与元数据" aria-label="Permalink to &quot;1.2 WinRT 接口的语法与元数据&quot;">​</a></h3><p>WinRT 接口通常用 IDL Interface Definition Language（接口定义语言）描述：</p><div class="language-idl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface IMyInterface : IInspectable {</span></span>
<span class="line"><span>    HRESULT MyMethod([in] INT32 value);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这只是告诉编译器和工具：“有个叫 IMyInterface 的接口，里面有个 MyMethod 方法。”</p><ul><li><code>interface</code> 关键字定义接口。</li><li><code>IMyInterface</code> 是接口名，习惯以 I 开头。</li><li><code>IInspectable</code> 是 WinRT 所有接口的基类。</li><li>方法签名采用 COM 风格，返回 HRESULT。</li></ul><h4 id="元数据说明" tabindex="-1">元数据说明 <a class="header-anchor" href="#元数据说明" aria-label="Permalink to &quot;元数据说明&quot;">​</a></h4><p>WinRT 的元数据（metadata）描述接口的需求、方法、属性。编译器和运行时据此生成类型信息，实现类型安全和反射。是编译器根据 IDL 文件生成的描述信息。元数据不是你直接写的，而是工具自动生成的，供编译器和运行时使用。 这些自动生成的代码和元数据，最终让你能在 C++ 里像普通类一样用这些接口。</p><p>在你写好 IDL 后，启动生成项目或调试，编译器工具会自动在 Generate Files 文件夹里生成 C++ 头文件和元数据文件。你可以直接使用这些生成的文件作修改就能实现接口。</p><p>为什么先讲接口基础与定义？</p><ul><li>因为 WinRT 的核心就是“接口”。只有先搞清楚接口是什么、怎么定义，后面讲 vtable、智能指针、元数据等内容才有意义。</li><li>先讲接口基础，是为了让你理解 WinRT 的一切都是围绕接口展开的。</li></ul><h2 id="_2-com-接口与-vtable-虚表-底层原理" tabindex="-1">2. COM 接口与 vtable（虚表）底层原理 <a class="header-anchor" href="#_2-com-接口与-vtable-虚表-底层原理" aria-label="Permalink to &quot;2. COM 接口与 vtable（虚表）底层原理&quot;">​</a></h2><h3 id="_2-1-vtable-机制详解" tabindex="-1">2.1 vtable 机制详解 <a class="header-anchor" href="#_2-1-vtable-机制详解" aria-label="Permalink to &quot;2.1 vtable 机制详解&quot;">​</a></h3><p>**vtable（虚函数表）**是 C++ 实现多态的底层机制。每个实现了虚函数的类，编译器会为它生成一个 vtable，里面存储着所有虚函数的指针。对象通过 vtable 调用虚函数，实现运行时多态。</p><h4 id="vtable-内存布局" tabindex="-1">vtable 内存布局 <a class="header-anchor" href="#vtable-内存布局" aria-label="Permalink to &quot;vtable 内存布局&quot;">​</a></h4><p>每个 COM/WinRT 对象的 vtable 前 6 个方法是固定的：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VTableIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QueryInterface </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 查询接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AddRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 增加引用计数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Release </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 释放引用计数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetIids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 获取接口ID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetRuntimeClassName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取运行时类名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constexpr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetTrustLevel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 获取信任级别</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 6及以后为接口自定义方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>vtable 是一个指针数组，指向各个方法的实现。</li><li>对象内部持有 vtable 指针，调用方法时通过 vtable 查找。</li></ul><h4 id="汇编级调用原理" tabindex="-1">汇编级调用原理 <a class="header-anchor" href="#汇编级调用原理" aria-label="Permalink to &quot;汇编级调用原理&quot;">​</a></h4><p>对象调用接口方法时，底层汇编类似：</p><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">mov</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rcx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; rcx 为对象指针，rax 得到 vtable 地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 调用 vtable 第 2 个方法（AddRef）</span></span></code></pre></div><hr><h2 id="_3-iunknown-与-iinspectable-方法详解" tabindex="-1">3. IUnknown 与 IInspectable 方法详解 <a class="header-anchor" href="#_3-iunknown-与-iinspectable-方法详解" aria-label="Permalink to &quot;3. IUnknown 与 IInspectable 方法详解&quot;">​</a></h2><h3 id="_3-1-iunknown-三大方法" tabindex="-1">3.1 IUnknown 三大方法 <a class="header-anchor" href="#_3-1-iunknown-三大方法" aria-label="Permalink to &quot;3.1 IUnknown 三大方法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IUnknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HRESULT</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REFIID</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> riid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ppvObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ULONG</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AddRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ULONG</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>QueryInterface</code>：查询对象是否支持某个接口，实现多态和类型转换。</li><li><code>AddRef</code>：增加对象的引用计数，管理生命周期。</li><li><code>Release</code>：减少引用计数，计数为零时自动释放对象。</li></ul><h3 id="_3-2-iinspectable-扩展方法" tabindex="-1">3.2 IInspectable 扩展方法 <a class="header-anchor" href="#_3-2-iinspectable-扩展方法" aria-label="Permalink to &quot;3.2 IInspectable 扩展方法&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IInspectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : IUnknown {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HRESULT</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetIids</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULONG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> iidCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> iids</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HRESULT</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetRuntimeClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HSTRING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HRESULT</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetTrustLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TrustLevel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> trustLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>GetIids</code>：获取对象实现的所有接口 ID（IID）。</li><li><code>GetRuntimeClassName</code>：获取对象的运行时类名（字符串）。</li><li><code>GetTrustLevel</code>：获取对象的信任级别（安全相关）。</li></ul><h4 id="hresult-详解" tabindex="-1">HRESULT 详解 <a class="header-anchor" href="#hresult-详解" aria-label="Permalink to &quot;HRESULT 详解&quot;">​</a></h4><ul><li>HRESULT 是 32 位整数，表示方法调用结果。</li><li>常见值：S_OK（成功）、E_NOINTERFACE（接口不支持）、E_FAIL（一般性错误）。</li></ul><hr><h2 id="_4-winrt-接口的元数据与扩展机制" tabindex="-1">4. WinRT 接口的元数据与扩展机制 <a class="header-anchor" href="#_4-winrt-接口的元数据与扩展机制" aria-label="Permalink to &quot;4. WinRT 接口的元数据与扩展机制&quot;">​</a></h2><h3 id="_4-1-元数据的作用" tabindex="-1">4.1 元数据的作用 <a class="header-anchor" href="#_4-1-元数据的作用" aria-label="Permalink to &quot;4.1 元数据的作用&quot;">​</a></h3><ul><li>描述接口需求、方法签名、属性。</li><li>编译器据此生成类型信息。</li><li>运行时可用于反射和类型安全。</li></ul><h3 id="_4-2-idl-到-c-winrt-头文件自动生成" tabindex="-1">4.2 IDL 到 C++/WinRT 头文件自动生成 <a class="header-anchor" href="#_4-2-idl-到-c-winrt-头文件自动生成" aria-label="Permalink to &quot;4.2 IDL 到 C++/WinRT 头文件自动生成&quot;">​</a></h3><p><strong>IDL 文件定义接口</strong>：</p><div class="language-idl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface IMyInterface : IInspectable {</span></span>
<span class="line"><span>    HRESULT MyMethod([in] INT32 value);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>C++/WinRT 自动生成头文件</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IMyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : winrt::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IInspectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HRESULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> __stdcall</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>自动生成的接口类继承自 IInspectable，方法签名与 IDL 保持一致。</li></ul><hr><h2 id="_5-c-winrt-接口实现与调用流程" tabindex="-1">5. C++/WinRT 接口实现与调用流程 <a class="header-anchor" href="#_5-c-winrt-接口实现与调用流程" aria-label="Permalink to &quot;5. C++/WinRT 接口实现与调用流程&quot;">​</a></h2><h3 id="_5-1-实现接口" tabindex="-1">5.1 实现接口 <a class="header-anchor" href="#_5-1-实现接口" aria-label="Permalink to &quot;5.1 实现接口&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : winrt::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HRESULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> __stdcall</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 方法实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S_OK;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>winrt::implements&lt;MyClass, IMyInterface&gt;</code> 模板自动生成 vtable 并实现所有方法。</li></ul><h3 id="_5-2-接口调用流程" tabindex="-1">5.2 接口调用流程 <a class="header-anchor" href="#_5-2-接口调用流程" aria-label="Permalink to &quot;5.2 接口调用流程&quot;">​</a></h3><p><strong>开发者调用接口方法</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::com_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IMyInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>com_ptr</code> 是 C++/WinRT 的智能指针，自动管理对象生命周期。</li><li>调用 MyMethod 时，实际是通过 vtable 查找并调用 MyClass 的实现。</li></ul><h3 id="_5-3-consume-produce-模板机制" tabindex="-1">5.3 consume/produce 模板机制 <a class="header-anchor" href="#_5-3-consume-produce-模板机制" aria-label="Permalink to &quot;5.3 consume/produce 模板机制&quot;">​</a></h3><p><strong>consume_ 模板</strong>：负责将投影类型的调用转发到接口实现。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume_Windows_UI_Core_ICoreDispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RunAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const&amp;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RunAsync_impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>produce_ 模板</strong>：负责实现接口方法，并与 vtable 绑定。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce_Windows_UI_Core_ICoreDispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : ... {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HRESULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> __stdcall</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RunAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 实际方法逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>consume_ 模板将投影类型的调用转发到实际实现（produce_）。</li><li>produce_ 模板实现接口方法，供 vtable 调用。</li></ul><hr><h2 id="_6-智能指针与对象生命周期管理" tabindex="-1">6. 智能指针与对象生命周期管理 <a class="header-anchor" href="#_6-智能指针与对象生命周期管理" aria-label="Permalink to &quot;6. 智能指针与对象生命周期管理&quot;">​</a></h2><h3 id="_6-1-智能指针原理" tabindex="-1">6.1 智能指针原理 <a class="header-anchor" href="#_6-1-智能指针原理" aria-label="Permalink to &quot;6.1 智能指针原理&quot;">​</a></h3><ul><li><code>winrt::com_ptr&lt;T&gt;</code> 自动调用 AddRef/Release，无需手动管理对象生命周期。</li><li>防止内存泄漏和悬挂指针。</li></ul><p><strong>代码示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::com_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IMyInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 自动 AddRef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptr-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      // 自动调用 vtable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ptr 超出作用域时自动 Release</span></span></code></pre></div><hr><h2 id="_7-接口调用的底层流程与调试技巧" tabindex="-1">7. 接口调用的底层流程与调试技巧 <a class="header-anchor" href="#_7-接口调用的底层流程与调试技巧" aria-label="Permalink to &quot;7. 接口调用的底层流程与调试技巧&quot;">​</a></h2><h3 id="_7-1-接口调用的底层流程" tabindex="-1">7.1 接口调用的底层流程 <a class="header-anchor" href="#_7-1-接口调用的底层流程" aria-label="Permalink to &quot;7.1 接口调用的底层流程&quot;">​</a></h3><ol><li>对象持有 vtable 指针。</li><li>调用接口方法时，编译器生成汇编代码，通过 vtable 查找方法地址。</li><li>方法执行，返回 HRESULT。</li></ol><h3 id="_7-2-常见错误与调试技巧" tabindex="-1">7.2 常见错误与调试技巧 <a class="header-anchor" href="#_7-2-常见错误与调试技巧" aria-label="Permalink to &quot;7.2 常见错误与调试技巧&quot;">​</a></h3><ul><li>QueryInterface 返回 E_NOINTERFACE：对象不支持该接口。</li><li>Release 没有被正确调用：可能导致内存泄漏。</li><li>使用 winrt::com_ptr&lt;<code>T</code>&gt; 管理对象，避免手动调用 Release。</li><li>可用调试器查看对象的 vtable 指针和方法地址。</li></ul><hr><h2 id="_8-术语解释与扩展阅读" tabindex="-1">8. 术语解释与扩展阅读 <a class="header-anchor" href="#_8-术语解释与扩展阅读" aria-label="Permalink to &quot;8. 术语解释与扩展阅读&quot;">​</a></h2><ul><li><strong>COM</strong>：Component Object Model，Windows 平台的对象模型。</li><li><strong>IUnknown</strong>：COM 的基础接口，所有对象都必须实现。</li><li><strong>IInspectable</strong>：WinRT 的基础接口，扩展了 IUnknown。</li><li><strong>vtable</strong>：虚函数表，存储接口方法指针，实现多态。</li><li><strong>IDL</strong>：接口定义语言，描述接口和类。</li><li><strong>元数据</strong>：接口和类的描述信息，供编译器和运行时使用。</li><li><strong>投影类型</strong>：C++/WinRT 生成的用户友好类型。</li><li><strong>produce_/consume_ 模板</strong>：C++/WinRT 生成的底层实现模板。</li><li><strong>智能指针</strong>：自动管理对象生命周期的指针类型。</li><li><strong>HRESULT</strong>：COM/WinRT 方法的返回值类型，表示调用结果。</li></ul><hr><h2 id="_9-参考文献与扩展阅读" tabindex="-1">9. 参考文献与扩展阅读 <a class="header-anchor" href="#_9-参考文献与扩展阅读" aria-label="Permalink to &quot;9. 参考文献与扩展阅读&quot;">​</a></h2><ul><li>Microsoft Docs: <a href="https://learn.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/" target="_blank" rel="noreferrer">Windows Runtime C++ Reference</a></li><li>C++ Primer Plus（第六版）</li><li>Essential COM by Don Box</li><li>Modern C++ Programming with Test-Driven Development</li><li>Windows Runtime Internals</li></ul><hr><p>如需进一步学习模板元编程、COM ABI、WinRT 投影等内容，请参考本系列其他文章。</p>`,80)]))}const o=i(t,[["render",h]]);export{g as __pageData,o as default};
