import{_ as s,c as a,o as n,ae as l}from"./chunks/framework.eveauE4a.js";const g=JSON.parse('{"title":"WinUI3 中 Window 与 Page 的区别与生命周期详解","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/Page&Window1.md","filePath":"WinUI3/Page&Window1.md"}'),h={name:"WinUI3/Page&Window1.md"};function t(e,i,k,p,r,d){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="winui3-中-window-与-page-的区别与生命周期详解" tabindex="-1">WinUI3 中 Window 与 Page 的区别与生命周期详解 <a class="header-anchor" href="#winui3-中-window-与-page-的区别与生命周期详解" aria-label="Permalink to &quot;WinUI3 中 Window 与 Page 的区别与生命周期详解&quot;">​</a></h1><h2 id="_1-基本概念" tabindex="-1">1. 基本概念 <a class="header-anchor" href="#_1-基本概念" aria-label="Permalink to &quot;1. 基本概念&quot;">​</a></h2><ul><li><strong>Window</strong>：应用的顶层窗口，负责承载和显示内容（通常是一个 Page），拥有完整的生命周期和相关事件。</li><li><strong>Page</strong>：Window 的内容视图，负责具体的 UI 和逻辑，支持页面导航（Frame.Navigate），没有独立的关闭事件。</li><li><strong>关系</strong>：一个 Window 通常包含一个 Frame，Frame 负责导航不同的 Page。Page 依赖于 Window 来显示和管理内容，无法独立存在并启动。</li><li>值得一提的是在 win10 以后，相关由于系统对 dpi 所有窗口的优化，以后无论是顶层窗口还是子窗口，都能够支持高 dpi 的动态调整缩放。</li><li>注意尽管在 UWP 中，Page 的概念已经被淡化，更多的是使用 UserControl 来承载内容，但在 WinUI3 中 Page 依然是主要的内容视图。</li></ul><h2 id="_2-生命周期与事件机制" tabindex="-1">2. 生命周期与事件机制 <a class="header-anchor" href="#_2-生命周期与事件机制" aria-label="Permalink to &quot;2. 生命周期与事件机制&quot;">​</a></h2><h3 id="window" tabindex="-1">Window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;Window&quot;">​</a></h3><ul><li>主要事件： <ul><li><code>Closed</code>：窗口关闭时触发，可用于全局资源释放或通知内容清理。</li><li><code>Activated</code>：窗口激活时触发。</li></ul></li><li>典型用途：管理应用生命周期、全局资源、通知页面清理。</li></ul><h3 id="page" tabindex="-1">Page <a class="header-anchor" href="#page" aria-label="Permalink to &quot;Page&quot;">​</a></h3><ul><li>没有 <code>Closed</code> 事件。</li><li>主要生命周期方法： <ul><li><code>OnNavigatedTo</code>：页面被导航到时调用。</li><li><code>OnNavigatedFrom</code>：页面被导航离开时调用，适合做页面资源释放。</li><li>析构函数（C++/WinRT）：页面对象被销毁时自动调用，可做最后的清理。</li></ul></li><li>典型用途：管理页面内资源、响应导航、UI逻辑。</li></ul><h2 id="_3-典型用法与推荐实践" tabindex="-1">3. 典型用法与推荐实践 <a class="header-anchor" href="#_3-典型用法与推荐实践" aria-label="Permalink to &quot;3. 典型用法与推荐实践&quot;">​</a></h2><ul><li><strong>不要在 Page 里订阅 <code>Closed</code> 事件</strong>，因为 Page <strong>没有</strong>这个事件。</li><li><strong>推荐在 Window 的 <code>Closed</code> 事件里通知当前 Page 做清理</strong>，如调用 Page 的自定义清理方法。</li><li><strong>页面切换时</strong>（Frame.Navigate），旧 Page 会被析构或调用 <code>OnNavigatedFrom</code>，适合做资源释放。</li></ul><p>在 WinUI3 中，页面资源释放推荐优先使用 <code>OnNavigatedFrom()</code> 方法，而不是依赖析构函数。原因如下：</p><ul><li><code>OnNavigatedFrom()</code> 是专门为页面导航离开时设计的生命周期方法，<strong>每次页面被导航离开都会调用</strong>，适合释放事件绑定、定时器等资源。如果用 C++/WinRT，析构函数可做最后兜底清理，但不要只依赖它。</li><li>析构函数（C++/WinRT 支持，C# 不支持）只有在页面对象<strong>真正被销毁时</strong>才会调用，<strong>如果页面被缓存（如设置 NavigationCacheMode.Required），析构函数不会及时执行</strong>，页面内的资源会长时间无法释放。</li><li>在 C# 中没有析构函数，只能用 <code>OnNavigatedFrom</code> 或实现 IDisposable。</li><li>如果页面需要被 Window 通知关闭，可实现自定义清理方法，由 Window 的 Closed 事件主动调用 Page 的自定义清理方法，确保页面资源被释放。这样可以在整个窗口关闭时，通知页面做一些特殊的清理工作（比如释放资源、保存数据等），而不是只依赖页面的导航事件或析构函数。</li></ul><p>示例：</p><h3 id="c-winrt-示例" tabindex="-1">C++/WinRT 示例 <a class="header-anchor" href="#c-winrt-示例" aria-label="Permalink to &quot;C++/WinRT 示例&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MainWindow.xaml.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Closed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::OnClosed });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 假设有一个 Frame 控件的名字叫 m_frame，我们在此处直接导航到页面，在第二部分会讲如何通过按钮点击导航到页面。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    m_frame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xaml_typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnClosed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取当前页面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m_frame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().try_as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">YourPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用页面的自定义清理方法。注意需要声明暴露其 Page 对应的 idl 方法。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnWindowClosed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 还可以做其他全局清理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnWindowClosed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这里做自定义清理调用，比如释放资源、保存数据等</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 例如：m_timer.Stop();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>通过 Window 的 Closed 事件，主动通知 Page 做清理，适合需要在窗口关闭时释放资源或保存数据的场景。</li></ul><h2 id="_4-page-导航时内容状态持久化方案" tabindex="-1">4. Page 导航时内容状态持久化方案 <a class="header-anchor" href="#_4-page-导航时内容状态持久化方案" aria-label="Permalink to &quot;4. Page 导航时内容状态持久化方案&quot;">​</a></h2><p>在 WinUI 3 中，默认情况下，页面（Page）对象在导航离开时会被销毁（析构），页面上的内容和状态（如表单、文本框输入、操作记录等）也会随之丢失。如果希望页面切换后再次返回时内容保持原样，需要实现“状态持久化”机制。</p><h3 id="_4-1-状态持久化的常见方案" tabindex="-1">4.1 状态持久化的常见方案 <a class="header-anchor" href="#_4-1-状态持久化的常见方案" aria-label="Permalink to &quot;4.1 状态持久化的常见方案&quot;">​</a></h3><ol><li><p><strong>外部保存页面状态</strong><br> 在页面导航离开时，将需要保存的数据（如文本、操作记录等）存储到外部容器（如 ViewModel、全局对象、静态变量、字典等），再次导航回来时从外部容器恢复数据。</p></li><li><p><strong>页面缓存（Page Cache）</strong><br> 通过 Frame 的缓存机制（如设置 <code>NavigationCacheMode</code> 为 <code>Required</code>），让页面对象不会被销毁，页面内容和状态会自动保留。</p></li><li><p><strong>序列化与反序列化</strong><br> 导航离开时将页面状态序列化为字符串或对象，导航回来时反序列化恢复。不太靠谱，适合简单数据。</p></li></ol><h3 id="_4-2-推荐做法-使用-frame-的缓存机制" tabindex="-1">4.2 推荐做法：使用 Frame 的缓存机制 <a class="header-anchor" href="#_4-2-推荐做法-使用-frame-的缓存机制" aria-label="Permalink to &quot;4.2 推荐做法：使用 Frame 的缓存机制&quot;">​</a></h3><p>WinUI3 的 Frame 控件支持页面缓存，设置 <code>NavigationCacheMode</code> 为 <code>Required</code> 后，页面对象不会被销毁，所有内容和状态会自动保留。</p><h4 id="c-winrt-示例-1" tabindex="-1">C++/WinRT 示例 <a class="header-anchor" href="#c-winrt-示例-1" aria-label="Permalink to &quot;C++/WinRT 示例&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.cpp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置页面缓存，保证状态持久化，相关语法已经在前面章节提到，不再赘述</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationCacheMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationCacheMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Required);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="c-示例" tabindex="-1">C# 示例 <a class="header-anchor" href="#c-示例" aria-label="Permalink to &quot;C# 示例&quot;">​</a></h4><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.cs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.NavigationCacheMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NavigationCacheMode.Required;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>注意：缓存模式下，页面不会被析构，所有控件内容和变量状态都会保留，适合需要“记住内容”的场景。</p></blockquote><h3 id="_4-3-外部保存与恢复页面状态-适用于不缓存页面的场景" tabindex="-1">4.3 外部保存与恢复页面状态（适用于不缓存页面的场景） <a class="header-anchor" href="#_4-3-外部保存与恢复页面状态-适用于不缓存页面的场景" aria-label="Permalink to &quot;4.3 外部保存与恢复页面状态（适用于不缓存页面的场景）&quot;">​</a></h3><p>如果不希望缓存整个页面对象，也可以在导航事件中手动保存和恢复页面状态。</p><h4 id="c-winrt-示例-2" tabindex="-1">C++/WinRT 示例 <a class="header-anchor" href="#c-winrt-示例-2" aria-label="Permalink to &quot;C++/WinRT 示例&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.h</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : YourPageT&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::hstring s_text;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 静态变量保存内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnNavigatedFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnNavigatedTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnNavigatedFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myTextBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 离开时保存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnNavigatedTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    myTextBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s_text);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 返回时恢复</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注：</p><ul><li><code>static</code> 静态成员变量属于该类，不属于任何一个对象，只有一份，具有全局生命周期，不会随页面销毁而丢失。所以我们十分不推荐，如果产生了多个页面实例，静态变量会被所有实例共享，可能导致数据混乱。 <ul><li>这个涉及到页面的生命周期了，稍微澄清一些相关内容：</li><li>成员变量（如 winrt::hstring m_text;）属于页面对象本身。</li><li>当页面被销毁（比如 Frame.Navigate 导航到其他页面），成员变量会随对象一起销毁，数据也会丢失。</li><li>如果你只用成员变量保存内容，页面切换回来时是新对象，原来的数据已经没了。</li></ul></li><li>你也可以用全局变量、单例类等方式保存数据，但需要自己实现。建议用外部状态容器（如 ViewModel、全局字典、单例对象、参数传递等），或者直接用 Frame 的缓存机制。</li></ul><h4 id="c-示例-1" tabindex="-1">C# 示例 <a class="header-anchor" href="#c-示例-1" aria-label="Permalink to &quot;C# 示例&quot;">​</a></h4><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// YourPage.xaml.cs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _cachedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnNavigatedFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _cachedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myTextBox.Text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnNavigatedTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavigationEventArgs</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_cachedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        myTextBox.Text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _cachedText;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-4-方案选择建议" tabindex="-1">4.4 方案选择建议 <a class="header-anchor" href="#_4-4-方案选择建议" aria-label="Permalink to &quot;4.4 方案选择建议&quot;">​</a></h3><ul><li><strong>页面内容较多且需要完整保留时</strong>，推荐使用 Frame 的缓存机制（<code>NavigationCacheMode.Required</code>）。</li><li><strong>只需保存部分数据或页面对象不宜缓存时</strong>，推荐在导航事件中手动保存和恢复状态。</li><li><strong>缓存机制会占用更多内存</strong>，适合页面数量有限的场景；大量页面建议用外部保存方案。</li></ul><h2 id="_5-page-析构与资源释放实用指导" tabindex="-1">5. Page 析构与资源释放实用指导 <a class="header-anchor" href="#_5-page-析构与资源释放实用指导" aria-label="Permalink to &quot;5. Page 析构与资源释放实用指导&quot;">​</a></h2><ul><li><strong>C++/WinRT</strong>：可以直接实现析构函数（<code>~YourPage()</code>），在页面对象销毁时自动释放资源。 <ul><li>推荐释放事件绑定、定时器、非托管资源等。</li><li>注意：析构函数只在对象真正销毁时调用，导航离开但未销毁不会触发。</li></ul></li><li><strong>C#</strong>：没有析构函数，推荐重写 <code>OnNavigatedFrom</code> 做清理。 <ul><li>也可实现 <code>IDisposable</code> 接口，手动释放资源。</li></ul></li><li><strong>通用建议</strong>： <ul><li>所有资源绑定、订阅、线程、定时器等都应在页面离开或销毁时释放。</li><li>如果页面需要被 Window 通知关闭，建议实现一个自定义方法（如 <code>OnWindowClosed</code>），由 Window 的事件主动调用。</li></ul></li></ul><h2 id="_6-总结" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><ul><li>Window 是顶层容器，拥有完整生命周期和关闭事件，适合做全局管理。</li><li>Page 是内容视图，负责具体 UI 和逻辑，没有关闭事件，适合做页面资源管理。</li><li>推荐在 Window 的关闭事件里通知 Page 做清理，Page 切换时用导航事件或析构函数释放资源。</li><li>C++/WinRT 支持析构函数，C# 推荐用导航事件或 IDisposable。</li><li>默认导航会销毁页面对象，内容会丢失。</li><li>设置 <code>NavigationCacheMode</code> 为 <code>Required</code> 可自动保留页面内容和状态。</li><li>也可在导航事件中手动保存和恢复页面状态。</li><li>选择合适方案，确保用户操作和内容不会因页面切换而丢失。</li></ul><p>后面我们会讲页面窗口的生命周期与导航实战</p>`,42)]))}const o=s(h,[["render",t]]);export{g as __pageData,o as default};
