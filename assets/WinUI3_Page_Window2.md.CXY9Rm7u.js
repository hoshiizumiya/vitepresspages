import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.eveauE4a.js";const E=JSON.parse('{"title":"WinUI 3 页面生命周期与导航实战","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/Page&Window2.md","filePath":"WinUI3/Page&Window2.md"}'),t={name:"WinUI3/Page&Window2.md"};function p(l,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="winui-3-页面生命周期与导航实战" tabindex="-1">WinUI 3 页面生命周期与导航实战 <a class="header-anchor" href="#winui-3-页面生命周期与导航实战" aria-label="Permalink to &quot;WinUI 3 页面生命周期与导航实战&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在 WinUI 3 中，页面生命周期和导航是应用程序开发的核心部分。理解这些概念对于创建响应式和用户友好的应用至关重要。本篇文章将深入探讨 WinUI 3 中页面的生命周期、导航机制以及相关的事件处理。</p><h2 id="应用初始化与启动阶段详解" tabindex="-1">应用初始化与启动阶段详解 <a class="header-anchor" href="#应用初始化与启动阶段详解" aria-label="Permalink to &quot;应用初始化与启动阶段详解&quot;">​</a></h2><p>UWP 和 WinUI 3 cppwinrt 架构的启动顺序基本一致，详见第一部分，此处不赘述。</p><h3 id="程序启动流程简述" tabindex="-1">程序启动流程简述 <a class="header-anchor" href="#程序启动流程简述" aria-label="Permalink to &quot;程序启动流程简述&quot;">​</a></h3><ol><li>Windows 外壳启动进程并调用 Main 函数。</li><li>Main 函数创建 CoreApplication 对象。</li><li>CoreApplication 对象创建 CoreWindow 对象。</li><li>CoreWindow 对象被激活，同时创建 DispatcherQueue。</li><li>App 对象被创建，并调用其构造函数。</li><li>App 对象的 OnLaunched 方法被调用。</li></ol><h3 id="窗口启动激活阶段" tabindex="-1">窗口启动激活阶段： <a class="header-anchor" href="#窗口启动激活阶段" aria-label="Permalink to &quot;窗口启动激活阶段：&quot;">​</a></h3><p>执行 OnLaunched 方法。 在 OnLaunched 方法中。我们可以自定义启动行为。</p><h3 id="窗口启动与自定义" tabindex="-1">窗口启动与自定义 <a class="header-anchor" href="#窗口启动与自定义" aria-label="Permalink to &quot;窗口启动与自定义&quot;">​</a></h3><p>WinUI 3 使用 <code>Microsoft.UI.Windowing</code> 命名空间进行窗口管理，推荐使用 <code>AppWindow</code> 类实现高级窗口操作。 通常我们使用 make&lt;<code>T</code>&gt;() 创建页面实例。</p><ol><li>对象分配与初始化 make&lt;<code>T</code>&gt;() 会分配一个实现了 WinRT 接口的对象，并调用其构造函数（可以传递参数）。</li><li>返回智能指针 返回的是一个 WinRT 智能指针（如 winrt::MainWindow），自动管理对象生命周期（引用计数）。</li><li>类型安全 保证返回的对象类型和接口类型一致，避免手动 new/delete 和 COM 相关的繁琐操作。</li></ol><h4 id="appwindow-常用属性与方法" tabindex="-1">AppWindow 常用属性与方法 <a class="header-anchor" href="#appwindow-常用属性与方法" aria-label="Permalink to &quot;AppWindow 常用属性与方法&quot;">​</a></h4><ul><li><strong>Create</strong>：创建窗口实例。</li><li><strong>Destroy</strong>：销毁窗口。</li><li><strong>Show/Hide</strong>：显示/隐藏窗口。</li><li><strong>Move/MoveAndResize</strong>：移动或移动并调整窗口大小。</li><li><strong>Resize/ResizeClient</strong>：调整窗口或客户区大小。</li><li><strong>SetIcon/SetTaskbarIcon/SetTitleBarIcon</strong>：设置窗口、任务栏、标题栏图标。</li><li><strong>SetPresenter</strong>：设置窗口呈现方式（如重叠、全屏等）。</li><li><strong>AssociateWithDispatcherQueue</strong>：关联到 DispatcherQueue。</li><li><strong>GetFromWindowId</strong>：通过窗口 ID 获取窗口实例。</li><li><strong>MoveInZOrderAtTop/Bottom/Below</strong>：调整窗口 Z 顺序。</li></ul><h3 id="自定义窗口启动" tabindex="-1">自定义窗口启动 <a class="header-anchor" href="#自定义窗口启动" aria-label="Permalink to &quot;自定义窗口启动&quot;">​</a></h3><p>有关此框架的所有窗口高级定义都在 Microsoft.UI.Windowing 命名空间中。 UWP 与 WinUI 3 不一样，特别是命名空间。目前 WinUI 3 使用 <code>Microsoft.UI.Windowing</code> 命名空间来处理窗口相关的操作，而不是 <code>Windows.UI.Xaml.Window</code>。 你在查找文档时，千万要注意不要和 UWP 的混淆。你应该是 windows app sdk 中查找相关文档。 我们主要使用 <code>AppWindow</code> 类来创建和管理应用窗口。以下是在任何位置<strong>自定义</strong>创建应用窗口的基本步骤：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WinUI3\\AppWindowSample.cpp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Microsoft.UI.Xaml.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Microsoft.UI.Windowing.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Microsoft.UI.Xaml.Controls.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Windows.Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IAsyncAction</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateAndShowAppWindowAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 异步创建 AppWindow 实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> co_await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TryCreateAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">appWindow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        co_return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 创建失败直接返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 创建 XAML 内容（如一个简单的 TextBlock）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textBlock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textBlock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">L&quot;Hello, AppWindow!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 设置窗口内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetAppWindowContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appWindow, textBlock);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4. 设置窗口最小尺寸</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Size minSize{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppWindowPresenterKind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Overlapped);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetPreferredMinSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(minSize);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5. 显示窗口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    co_await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TryShowAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 6. 关闭事件处理器（可选）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Closed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 资源清理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在合适的位置调用（如 App.xaml.cpp 的 OnLaunched 或按钮点击事件中）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// winrt::CreateAndShowAppWindowAsync();</span></span></code></pre></div><ul><li>使用 co_await AppWindow::TryCreateAsync() 异步创建窗口。</li><li>通过 AppWindow::SetAppWindowContent 设置窗口内容（需传入 XAML 元素）。</li><li>使用 SetPreferredMinSize 设置窗口最小尺寸。</li><li>通过 TryShowAsync() 显示窗口</li></ul><h3 id="关闭窗口与资源释放" tabindex="-1">关闭窗口与资源释放 <a class="header-anchor" href="#关闭窗口与资源释放" aria-label="Permalink to &quot;关闭窗口与资源释放&quot;">​</a></h3><p>关闭时的资源释放和清理工作可以通过已在步骤6中注册的事件来完成。我们直接调用这个方法即可出发注册的事件处理器。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">appWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>原理说明：<br> AppWindow 的 Closed 事件会在窗口关闭时被触发，无论是用户手动关闭窗口，还是通过代码调用 appWindow.Close()。因此，你在 Closed 事件中注册的资源清理逻辑会被正常执行。</p><h2 id="使用-appwindowpresenter-来自定义设置窗口呈现方式" tabindex="-1">使用 AppWindowPresenter 来自定义设置窗口呈现方式 <a class="header-anchor" href="#使用-appwindowpresenter-来自定义设置窗口呈现方式" aria-label="Permalink to &quot;使用 AppWindowPresenter 来自定义设置窗口呈现方式&quot;">​</a></h2><ol><li>Include Necessary Headers: Make sure to include the required headers for using the AppWindow and AppWindowPresenter classes.<br> 包含必要的头文件：确保包含使用 AppWindow 和 AppWindowPresenter 类所需的头文件。</li></ol><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Microsoft.UI.Windowing.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ol start="2"><li>Initialize the AppWindowPresenter: Create an instance of AppWindowPresenter and set its properties to customize the window’s appearance and behavior.<br> 初始化 AppWindowPresenter：创建 AppWindowPresenter 的实例，并设置其属性以自定义窗口的外观和行为。</li></ol><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AppWindowPresenter presenter;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set properties such as title, size, etc.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">presenter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">L&quot;My Custom Window&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">presenter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">presenter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsResizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ol start="3"><li>Create the AppWindow: Use the Create method of AppWindow to create a new window using the configured presenter.<br> 创建 AppWindow：使用 AppWindow 的 Create 方法，通过配置好的 presenter 创建新窗口。</li></ol><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AppWindow myWindow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presenter);</span></span></code></pre></div><ol start="4"><li>Show the Window: Finally, display the window using the Show method and set up any necessary event handlers.<br> 显示窗口：最后，使用 Show 方法显示窗口，并设置任何必要的事件处理器。</li></ol><div class="language-C++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Closed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle window close</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>This example demonstrates how to create a custom window with specific styles and properties defined by the AppWindowPresenter in C++/WinRT. You can further customize the window’s behavior and appearance as needed in your application. 本示例展示了如何在 C++/WinRT 中创建具有特定样式和属性的定制窗口。您可以根据需要在应用程序中进一步自定义窗口的行为和外观。</p><h2 id="navigationviewiteminvokedeventargs-class" tabindex="-1">NavigationViewItemInvokedEventArgs Class <a class="header-anchor" href="#navigationviewiteminvokedeventargs-class" aria-label="Permalink to &quot;NavigationViewItemInvokedEventArgs Class&quot;">​</a></h2><p>NavigationViewItemInvokedEventArgs 类，它位于 Windows.UI.Xaml.Controls 命名空间中。此类提供了 NavigationView.ItemInvoked 事件的事件数据。页面中提到了一些重要信息，包括该类的构造函数、属性以及与 WinUI 2 API 的等效性。</p><p>主要内容包括：<br> 定义：NavigationViewItemInvokedEventArgs 类用于处理导航视图项被调用时的事件数据。<br> 构造函数：提供了初始化该类的新实例的方法。<br> 属性：</p><ul><li>InvokedItem：获取被调用项的引用。</li><li>InvokedItemContainer：获取被调用项的容器。</li><li>IsSettingsInvoked：指示被调用项是否为设置菜单项的值。</li><li>RecommendedNavigationTransitionInfo：获取推荐的导航过渡信息。 示例内容：<br> 该类的构造函数可以通过 new NavigationViewItemInvokedEventArgs() 来创建一个新的实例。</li></ul><p>在 NavigationViewItemInvokedEventArgs 类中，IsSettingsInvoked 属性是一个布尔值，用于指示被调用的项是否为设置菜单项。设置菜单项通常是指在导航视图中提供访问应用程序设置或偏好的特定项。例如，当用户点击导航菜单中的齿轮图标时，IsSettingsInvoked 属性将返回 true，表明被调用的项是设置菜单项。这使得开发人员能够根据用户的交互来处理导航。</p><p>设置菜单项的概念指的是在导航视图中允许用户访问与应用程序相关的设置的特定项。通过 IsSettingsInvoked 属性，开发人员可以确定用户是否与此特定项进行了交互。例如，如果用户从导航菜单中选择标记为“设置”的选项，IsSettingsInvoked 属性将为 true，这使得应用程序能够做出相应的反应，比如显示设置页面。</p><p>在应用程序开发中，IsSettingsInvoked 属性作为指示器，帮助开发人员判断用户是否选择了专门用于设置的菜单项。这一点非常重要，因为它允许应用程序根据用户的交互以不同的方式处理导航。例如，如果用户选择了一个用于设置的菜单项，应用程序可以触发特定的导航过渡或显示设置界面，从而确保用户体验的相关性和流畅性。</p>`,39)]))}const g=i(t,[["render",p]]);export{E as __pageData,g as default};
