import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.eveauE4a.js";const c=JSON.parse('{"title":"WinUI 3 WinRT C++ 开发完整教程 - 第一部分：基础概念与架构","description":"","frontmatter":{},"headers":[],"relativePath":"WinUI3/WinUI3-WinRT-CPP-完整教程-第一部分-基础概念与架构.md","filePath":"WinUI3/WinUI3-WinRT-CPP-完整教程-第一部分-基础概念与架构.md"}'),t={name:"WinUI3/WinUI3-WinRT-CPP-完整教程-第一部分-基础概念与架构.md"};function p(e,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="winui-3-winrt-c-开发完整教程-第一部分-基础概念与架构" tabindex="-1">WinUI 3 WinRT C++ 开发完整教程 - 第一部分：基础概念与架构 <a class="header-anchor" href="#winui-3-winrt-c-开发完整教程-第一部分-基础概念与架构" aria-label="Permalink to &quot;WinUI 3 WinRT C++ 开发完整教程 - 第一部分：基础概念与架构&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ol><li><a href="#概述">概述</a></li><li><a href="#winrt-基础概念">WinRT 基础概念</a></li><li><a href="#cwinrt-语言投影">C++/WinRT 语言投影</a></li><li><a href="#winui-3-架构深度解析">WinUI 3 架构深度解析</a></li><li><a href="#项目结构与文件组织">项目结构与文件组织</a></li><li><a href="#编译系统与代码生成">编译系统与代码生成</a></li></ol><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>WinUI 3 是微软最新的原生 Windows 应用程序 UI 框架，它结合了 WinRT（Windows Runtime）的强大功能和 C++ 的高性能。本教程将从底层原理开始，详细讲解如何使用 C++/WinRT 开发现代化的 Windows 应用程序。</p><h3 id="为什么选择-winui-3-c-winrt" tabindex="-1">为什么选择 WinUI 3 + C++/WinRT？ <a class="header-anchor" href="#为什么选择-winui-3-c-winrt" aria-label="Permalink to &quot;为什么选择 WinUI 3 + C++/WinRT？&quot;">​</a></h3><ol><li><strong>原生性能</strong>：C++ 提供最佳的运行时性能和内存控制</li><li><strong>现代化 UI</strong>：WinUI 3 提供 Fluent Design 系统和现代化控件</li><li><strong>跨版本支持</strong>：支持 Windows 10 1809+ 和 Windows 11</li><li><strong>与系统深度集成</strong>：可以访问所有 Windows API 和功能</li></ol><h2 id="winrt-基础概念" tabindex="-1">WinRT 基础概念 <a class="header-anchor" href="#winrt-基础概念" aria-label="Permalink to &quot;WinRT 基础概念&quot;">​</a></h2><h3 id="什么是-winrt" tabindex="-1">什么是 WinRT？ <a class="header-anchor" href="#什么是-winrt" aria-label="Permalink to &quot;什么是 WinRT？&quot;">​</a></h3><p>Windows Runtime (WinRT) 是微软设计的应用程序架构，它提供了：</p><ol><li><strong>语言无关的组件模型</strong>：基于 COM 但简化了接口</li><li><strong>元数据驱动</strong>：使用 .winmd 文件描述类型信息</li><li><strong>投影技术</strong>：为不同语言提供自然的编程模型</li></ol><h3 id="winrt-的核心概念" tabindex="-1">WinRT 的核心概念 <a class="header-anchor" href="#winrt-的核心概念" aria-label="Permalink to &quot;WinRT 的核心概念&quot;">​</a></h3><h4 id="_1-接口定义语言-idl" tabindex="-1">1. 接口定义语言 (IDL) <a class="header-anchor" href="#_1-接口定义语言-idl" aria-label="Permalink to &quot;1. 接口定义语言 (IDL)&quot;">​</a></h4><p>WinRT 使用 IDL 文件定义运行时类和接口。在我们的项目中可以看到：</p><div class="language-idl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// MainWindow.idl</span></span>
<span class="line"><span>namespace WinUI3App1C__</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    [default_interface]</span></span>
<span class="line"><span>    runtimeclass MainWindow : Microsoft.UI.Xaml.Window</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        MainWindow();</span></span>
<span class="line"><span>        Windows.Foundation.Collections.IObservableVector&lt;String&gt; collection{ get; };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>深度解析</strong>：</p><ul><li><code>runtimeclass</code> 关键字定义一个可被其他语言使用的运行时类</li><li><code>[default_interface]</code> 特性指定这是默认接口</li><li>继承自 <code>Microsoft.UI.Xaml.Window</code> 提供窗口基础功能</li><li><code>collection{ get; }</code> 定义一个只读属性</li></ul><h4 id="_2-abi-application-binary-interface" tabindex="-1">2. ABI (Application Binary Interface) <a class="header-anchor" href="#_2-abi-application-binary-interface" aria-label="Permalink to &quot;2. ABI (Application Binary Interface)&quot;">​</a></h4><p>WinRT 的 ABI 基于 COM 接口，但进行了现代化改进：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成的 ABI 代码示例（简化版）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __declspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) IMainWindow : ::IInspectable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    virtual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HRESULT __stdcall </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>关键点</strong>：</p><ul><li>所有 WinRT 接口都继承自 <code>IInspectable</code></li><li>使用标准 COM 调用约定 (<code>__stdcall</code>)</li><li>自动处理引用计数和错误处理</li></ul><h4 id="_3-投影层-projection-layer" tabindex="-1">3. 投影层 (Projection Layer) <a class="header-anchor" href="#_3-投影层-projection-layer" aria-label="Permalink to &quot;3. 投影层 (Projection Layer)&quot;">​</a></h4><p>C++/WinRT 投影层将底层 ABI 转换为现代 C++ 代码：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从项目代码中看到的投影示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WinUI3App1C__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : MainWindowT&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IObservableVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="c-winrt-语言投影" tabindex="-1">C++/WinRT 语言投影 <a class="header-anchor" href="#c-winrt-语言投影" aria-label="Permalink to &quot;C++/WinRT 语言投影&quot;">​</a></h2><h3 id="投影架构" tabindex="-1">投影架构 <a class="header-anchor" href="#投影架构" aria-label="Permalink to &quot;投影架构&quot;">​</a></h3><p>C++/WinRT 使用多层架构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户代码 (MainWindow.xaml.cpp)</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>投影层 (MainWindow.g.h)</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>ABI 层 (Generated ABI code)</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>WinRT 运行时</span></span></code></pre></div><h3 id="代码生成过程" tabindex="-1">代码生成过程 <a class="header-anchor" href="#代码生成过程" aria-label="Permalink to &quot;代码生成过程&quot;">​</a></h3><ol><li><strong>IDL 编译</strong>：<code>midl.exe</code> 将 IDL 文件编译为 <code>.winmd</code> 文件</li><li><strong>投影生成</strong>：<code>cppwinrt.exe</code> 读取 <code>.winmd</code> 生成 C++ 头文件</li><li><strong>实现模板</strong>：生成 <code>.g.h</code> 和 <code>.g.cpp</code> 文件作为实现基础</li></ol><h3 id="类型映射" tabindex="-1">类型映射 <a class="header-anchor" href="#类型映射" aria-label="Permalink to &quot;类型映射&quot;">​</a></h3><p>WinRT 类型与 C++ 类型的映射：</p><table tabindex="0"><thead><tr><th>WinRT 类型</th><th>C++ 类型</th><th>说明</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>winrt::hstring</code></td><td>不可变字符串</td></tr><tr><td><code>IObservableVector&lt;T&gt;</code></td><td><code>winrt::Windows::Foundation::Collections::IObservableVector&lt;T&gt;</code></td><td>可观察集合</td></tr><tr><td><code>Object</code></td><td><code>winrt::Windows::Foundation::IInspectable</code></td><td>基础对象类型</td></tr></tbody></table><h3 id="智能指针和生命周期管理" tabindex="-1">智能指针和生命周期管理 <a class="header-anchor" href="#智能指针和生命周期管理" aria-label="Permalink to &quot;智能指针和生命周期管理&quot;">​</a></h3><p>C++/WinRT 使用智能指针自动管理对象生命周期：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从项目代码中的示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::IObservableVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hstring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceArray{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single_threaded_observable_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>关键特性</strong>：</p><ul><li>自动引用计数</li><li>RAII (Resource Acquisition Is Initialization) 原则</li><li>异常安全</li></ul><h2 id="winui-3-架构深度解析" tabindex="-1">WinUI 3 架构深度解析 <a class="header-anchor" href="#winui-3-架构深度解析" aria-label="Permalink to &quot;WinUI 3 架构深度解析&quot;">​</a></h2><h3 id="分层架构" tabindex="-1">分层架构 <a class="header-anchor" href="#分层架构" aria-label="Permalink to &quot;分层架构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>应用层 (XAML + C++)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>WinUI 3 控件层</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>Win32/WinRT 系统层</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>Windows 内核</span></span></code></pre></div><h3 id="xaml-与-c-的绑定机制" tabindex="-1">XAML 与 C++ 的绑定机制 <a class="header-anchor" href="#xaml-与-c-的绑定机制" aria-label="Permalink to &quot;XAML 与 C++ 的绑定机制&quot;">​</a></h3><h4 id="_1-代码绑定-direct-binding" tabindex="-1">1. 代码绑定（Direct Binding） <a class="header-anchor" href="#_1-代码绑定-direct-binding" aria-label="Permalink to &quot;1. 代码绑定（Direct Binding）&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 MainWindow.xaml.cpp 中的示例</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ItemsSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sourceArray);</span></span></code></pre></div><p>这种方式直接在 C++ 代码中设置控件属性，优点是：</p><ul><li>性能最佳</li><li>编译时类型检查</li><li>调试友好</li></ul><h4 id="_2-数据绑定-data-binding" tabindex="-1">2. 数据绑定（Data Binding） <a class="header-anchor" href="#_2-数据绑定-data-binding" aria-label="Permalink to &quot;2. 数据绑定（Data Binding）&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// IDL 中定义的属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Windows.Foundation.Collections.IObservableVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collection{ get; };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C++ 实现</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IObservableVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boundArray;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>深层原理</strong>：</p><ul><li>XAML 编译器生成绑定表达式</li><li>运行时通过反射访问属性</li><li>支持双向绑定和变更通知</li></ul><h3 id="事件处理机制" tabindex="-1">事件处理机制 <a class="header-anchor" href="#事件处理机制" aria-label="Permalink to &quot;事件处理机制&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addManualListButton_Click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IInspectable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Microsoft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Xaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RoutedEventArgs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 事件处理逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>事件处理流程</strong>：</p><ol><li>XAML 解析器注册事件处理器</li><li>用户交互触发事件</li><li>WinUI 3 框架调用 C++ 处理函数</li><li>通过投影层传递参数</li></ol><h2 id="项目结构与文件组织" tabindex="-1">项目结构与文件组织 <a class="header-anchor" href="#项目结构与文件组织" aria-label="Permalink to &quot;项目结构与文件组织&quot;">​</a></h2><h3 id="核心文件类型" tabindex="-1">核心文件类型 <a class="header-anchor" href="#核心文件类型" aria-label="Permalink to &quot;核心文件类型&quot;">​</a></h3><h4 id="_1-idl-文件-idl" tabindex="-1">1. IDL 文件 (.idl) <a class="header-anchor" href="#_1-idl-文件-idl" aria-label="Permalink to &quot;1. IDL 文件 (.idl)&quot;">​</a></h4><p>定义 WinRT 类型和接口：</p><div class="language-idl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>namespace WinUI3App1C__</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    [default_interface]</span></span>
<span class="line"><span>    runtimeclass MainWindow : Microsoft.UI.Xaml.Window</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        MainWindow();</span></span>
<span class="line"><span>        Windows.Foundation.Collections.IObservableVector&lt;String&gt; collection{ get; };</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_2-xaml-文件-xaml" tabindex="-1">2. XAML 文件 (.xaml) <a class="header-anchor" href="#_2-xaml-文件-xaml" aria-label="Permalink to &quot;2. XAML 文件 (.xaml)&quot;">​</a></h4><p>定义用户界面：</p><div class="language-xaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;Page x:Class=&quot;WinUI3App1C__.SettingsPage&quot;&gt;</span></span>
<span class="line"><span>    &lt;Grid&gt;</span></span>
<span class="line"><span>        &lt;!-- UI 元素 --&gt;</span></span>
<span class="line"><span>    &lt;/Grid&gt;</span></span>
<span class="line"><span>&lt;/Page&gt;</span></span></code></pre></div><h4 id="_3-头文件-h" tabindex="-1">3. 头文件 (.h) <a class="header-anchor" href="#_3-头文件-h" aria-label="Permalink to &quot;3. 头文件 (.h)&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainWindow.g.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WinUI3App1C__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : MainWindowT&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foundation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IObservableVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其他成员...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_4-实现文件-cpp" tabindex="-1">4. 实现文件 (.cpp) <a class="header-anchor" href="#_4-实现文件-cpp" aria-label="Permalink to &quot;4. 实现文件 (.cpp)&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pch.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainWindow.xaml.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __has_include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MainWindow.g.cpp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainWindow.g.cpp&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WinUI3App1C__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        InitializeComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 初始化逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="预编译头文件-pch-h" tabindex="-1">预编译头文件 (pch.h) <a class="header-anchor" href="#预编译头文件-pch-h" aria-label="Permalink to &quot;预编译头文件 (pch.h)&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#pragma</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;windows.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unknwn.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;restrictederrorinfo.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;hstring.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#undef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetCurrentTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _VSDESIGNER_DONT_LOAD_AS_DLL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Windows.Foundation.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;winrt/Windows.Foundation.Collections.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... 其他 WinRT 头文件</span></span></code></pre></div><p><strong>作用</strong>：</p><ul><li>加速编译过程</li><li>提供所有必要的 WinRT 类型定义</li><li>解决宏冲突问题</li></ul><h2 id="编译系统与代码生成" tabindex="-1">编译系统与代码生成 <a class="header-anchor" href="#编译系统与代码生成" aria-label="Permalink to &quot;编译系统与代码生成&quot;">​</a></h2><h3 id="编译流程" tabindex="-1">编译流程 <a class="header-anchor" href="#编译流程" aria-label="Permalink to &quot;编译流程&quot;">​</a></h3><ol><li><strong>预处理</strong>：处理预编译头文件</li><li><strong>IDL 编译</strong>：生成元数据和类型信息</li><li><strong>XAML 编译</strong>：生成 XAML 相关的 C++ 代码</li><li><strong>C++ 编译</strong>：编译用户代码和生成代码</li><li><strong>链接</strong>：生成最终可执行文件</li></ol><h3 id="生成的文件结构" tabindex="-1">生成的文件结构 <a class="header-anchor" href="#生成的文件结构" aria-label="Permalink to &quot;生成的文件结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Generated Files/</span></span>
<span class="line"><span>├── winrt/</span></span>
<span class="line"><span>│   ├── WinUI3App1C__.h           # 投影头文件</span></span>
<span class="line"><span>│   ├── impl/</span></span>
<span class="line"><span>│   │   └── WinUI3App1C__.2.h     # 实现模板</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── MainWindow.g.h                # XAML 代码背后文件</span></span>
<span class="line"><span>├── MainWindow.g.cpp              # XAML 实现文件</span></span>
<span class="line"><span>└── ...</span></span></code></pre></div><h3 id="代码生成原理" tabindex="-1">代码生成原理 <a class="header-anchor" href="#代码生成原理" aria-label="Permalink to &quot;代码生成原理&quot;">​</a></h3><h4 id="_1-xaml-编译器生成" tabindex="-1">1. XAML 编译器生成 <a class="header-anchor" href="#_1-xaml-编译器生成" aria-label="Permalink to &quot;1. XAML 编译器生成&quot;">​</a></h4><p>XAML 编译器分析 XAML 文件并生成：</p><ul><li>控件实例化代码</li><li>事件绑定代码</li><li>资源查找代码</li></ul><h4 id="_2-idl-投影生成" tabindex="-1">2. IDL 投影生成 <a class="header-anchor" href="#_2-idl-投影生成" aria-label="Permalink to &quot;2. IDL 投影生成&quot;">​</a></h4><p>基于 IDL 文件，cppwinrt.exe 生成：</p><ul><li>ABI 接口定义</li><li>投影类型</li><li>工厂实现</li></ul><h3 id="c-14-兼容性" tabindex="-1">C++14 兼容性 <a class="header-anchor" href="#c-14-兼容性" aria-label="Permalink to &quot;C++14 兼容性&quot;">​</a></h3><p>项目使用 C++14 标准，这意味着：</p><ul><li>支持 <code>auto</code> 类型推导</li><li>支持泛型 lambda</li><li>支持 <code>constexpr</code> 函数</li><li>不支持 C++17/20 的新特性</li></ul><p><strong>在代码中的体现</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// C++14 兼容的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> winrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single_threaded_observable_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 auto 简化类型声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理每个项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本部分介绍了 WinUI 3 WinRT C++ 开发的基础概念：</p><ol><li><strong>WinRT</strong> 提供了语言无关的组件模型</li><li><strong>C++/WinRT</strong> 通过投影技术提供现代 C++ 接口</li><li><strong>WinUI 3</strong> 在此基础上构建现代化 UI 框架</li><li><strong>项目结构</strong> 清晰分离了接口定义、实现和 UI</li></ol><p>下一部分将深入讲解具体的开发实践和高级特性。</p><hr><p><em>这是 WinUI 3 WinRT C++ 完整教程的第一部分。接下来的部分将涵盖具体的开发实践、数据绑定、导航、异步编程等主题。</em></p>`,94)]))}const g=i(t,[["render",p]]);export{c as __pageData,g as default};
